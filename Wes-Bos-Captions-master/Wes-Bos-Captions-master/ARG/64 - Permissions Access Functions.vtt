WEBVTT

1
00:00:00.000 --> 00:00:01.485
(whooshing)

2
00:00:01.485 --> 00:00:02.690
<v Narrator>All right, now what we're going to do is</v>

3
00:00:02.690 --> 00:00:05.270
we're going to make a function that will check

4
00:00:05.270 --> 00:00:08.610
if somebody has a specific permission,

5
00:00:08.610 --> 00:00:10.060
and I'm just gonna put those all

6
00:00:10.060 --> 00:00:12.230
on a single object called permissions,

7
00:00:12.230 --> 00:00:15.890
and then each permission will be its own function.

8
00:00:15.890 --> 00:00:18.993
So we'll say export const permissions,

9
00:00:20.700 --> 00:00:22.720
and that's an object.

10
00:00:22.720 --> 00:00:25.260
Now, inside of that object, we will...

11
00:00:25.260 --> 00:00:27.200
Let's look at like one of our fields here.

12
00:00:27.200 --> 00:00:31.160
We've got canmanageproducts, right?

13
00:00:31.160 --> 00:00:33.380
So what we'll do here is

14
00:00:33.380 --> 00:00:36.800
we'll make a method called canmanageproducts

15
00:00:38.350 --> 00:00:41.073
that will take in the session.

16
00:00:42.410 --> 00:00:43.790
And then basically we just need to check

17
00:00:43.790 --> 00:00:46.210
that they have this in their role.

18
00:00:46.210 --> 00:00:48.640
So we'll basically say return.

19
00:00:48.640 --> 00:00:50.780
We won't basically, we're gonna actually do it,

20
00:00:50.780 --> 00:00:52.620
no basic about it.
(laughing)

21
00:00:52.620 --> 00:00:56.787
We're gonna turn if the session.roll, oh no, .data.role

22
00:00:59.304 --> 00:01:01.100
.canmanageproducts.

23
00:01:01.100 --> 00:01:04.130
So that is either going to be true or false.

24
00:01:04.130 --> 00:01:05.610
And then we're returning that.

25
00:01:05.610 --> 00:01:08.850
So a couple of things that we need to do here

26
00:01:08.850 --> 00:01:13.300
is first of all, it's possible that there is no session.

27
00:01:13.300 --> 00:01:14.710
So we'll put a question mark on that.

28
00:01:14.710 --> 00:01:17.860
And that will, if it's, there's no session, it will return.

29
00:01:17.860 --> 00:01:18.980
Then it's also possible

30
00:01:18.980 --> 00:01:21.450
that that user does not have a role assigned yet.

31
00:01:21.450 --> 00:01:24.010
So we'll put a question mark on that as well.

32
00:01:24.010 --> 00:01:26.070
And that should be up and running.

33
00:01:26.070 --> 00:01:28.963
Now, if we go to our next one,

34
00:01:30.440 --> 00:01:32.020
I can see other users.

35
00:01:32.020 --> 00:01:36.260
You can just copy, paste, get this, paste it in.

36
00:01:36.260 --> 00:01:38.160
All right, next one, duplicate it.

37
00:01:38.160 --> 00:01:39.950
You see where we're going with this?

38
00:01:39.950 --> 00:01:41.510
We've got to do it again.

39
00:01:41.510 --> 00:01:42.343
Oh my gosh.

40
00:01:42.343 --> 00:01:43.176
Okay, duplicate it.

41
00:01:43.176 --> 00:01:44.700
Okay, well, no we're not gonna write

42
00:01:44.700 --> 00:01:46.210
every single one again, right?

43
00:01:46.210 --> 00:01:49.040
That's annoying, so, rather than

44
00:01:49.040 --> 00:01:52.180
having to write a checker function

45
00:01:52.180 --> 00:01:55.280
for every single product in there,

46
00:01:55.280 --> 00:01:57.390
there's kind of like two,

47
00:01:57.390 --> 00:01:59.290
there's two ways that you can go about this.

48
00:01:59.290 --> 00:02:01.510
Initially, when I wrote this, I was like,

49
00:02:01.510 --> 00:02:04.100
so I thought let's just make like a can function

50
00:02:04.100 --> 00:02:07.103
that takes in a permission.

51
00:02:08.428 --> 00:02:09.920
But we're not actually gonna do this, so don't write it

52
00:02:09.920 --> 00:02:12.530
but it'll take in a permission.

53
00:02:12.530 --> 00:02:15.623
And then from that, we return another function,

54
00:02:16.790 --> 00:02:19.020
that returns

55
00:02:19.020 --> 00:02:22.910
session.data.role,

56
00:02:22.910 --> 00:02:24.790
and then square bracket permission.

57
00:02:24.790 --> 00:02:29.010
And what that will do is it will take in a string permission

58
00:02:29.010 --> 00:02:32.260
and check if that property is on the user's role

59
00:02:32.260 --> 00:02:34.060
and that will return true or false.

60
00:02:34.060 --> 00:02:35.660
So that would actually work.

61
00:02:35.660 --> 00:02:37.740
But the downside to doing this is that you don't

62
00:02:37.740 --> 00:02:40.420
get the nice IntelliSense typing.

63
00:02:40.420 --> 00:02:41.960
You don't get the nice I can.

64
00:02:41.960 --> 00:02:44.810
You type M and it's like, did you mean canmanageproducts?

65
00:02:46.130 --> 00:02:47.880
So instead of having it that way,

66
00:02:47.880 --> 00:02:52.170
where it's statically done with the string, we will

67
00:02:53.070 --> 00:02:55.260
just generate these functions once

68
00:02:55.260 --> 00:02:57.780
for every single permission field that we have.

69
00:02:57.780 --> 00:02:59.560
And remember that we have exported

70
00:02:59.560 --> 00:03:01.520
this permissions list right here,

71
00:03:01.520 --> 00:03:03.510
which is all the keys canmanagecart,

72
00:03:03.510 --> 00:03:06.283
canmanageroles, et cetera, et cetera.

73
00:03:07.120 --> 00:03:09.070
So what we'll do here is right above

74
00:03:09.070 --> 00:03:12.263
we'll say const generated permissions,

75
00:03:15.940 --> 00:03:18.220
is equal to we'll say

76
00:03:18.220 --> 00:03:20.650
object.from entries.

77
00:03:20.650 --> 00:03:22.250
object.from entries,

78
00:03:22.250 --> 00:03:24.390
what it will do is it will take

79
00:03:27.603 --> 00:03:28.450
an array of

80
00:03:29.870 --> 00:03:31.290
a key and a value.

81
00:03:31.290 --> 00:03:35.440
So watch, if you do like this object.from entries

82
00:03:35.440 --> 00:03:37.490
if the first property is

83
00:03:39.010 --> 00:03:40.400
let's call it name

84
00:03:40.400 --> 00:03:42.440
and the second property is wes,

85
00:03:42.440 --> 00:03:45.930
it will return an object where name and oh,

86
00:03:45.930 --> 00:03:48.900
you got to return an array of arrays.

87
00:03:48.900 --> 00:03:52.320
Sorry, so try that, watch.

88
00:03:52.320 --> 00:03:53.370
Boom. There we go.

89
00:03:53.370 --> 00:03:54.940
And if we had multiple properties, we could

90
00:03:54.940 --> 00:03:58.930
the second array could be like age,

91
00:03:58.930 --> 00:04:01.810
is 101, you get the point, right?

92
00:04:01.810 --> 00:04:05.170
It will take an array of key values,

93
00:04:05.170 --> 00:04:06.560
and make an object from it.

94
00:04:06.560 --> 00:04:09.100
So what we'll do here is we'll run that,

95
00:04:09.100 --> 00:04:11.283
and then we'll take our permissions list,

96
00:04:14.610 --> 00:04:16.933
and we'll map over it.

97
00:04:18.043 --> 00:04:19.743
And we'll say for each permission,

98
00:04:22.210 --> 00:04:27.190
return an array where the key is going to be the permission,

99
00:04:27.190 --> 00:04:30.880
and the value is going to be a function

100
00:04:30.880 --> 00:04:33.573
that takes in the session,

101
00:04:36.770 --> 00:04:39.342
which we can type that right now.

102
00:04:39.342 --> 00:04:42.330
Uh, right here, list, access, arcs...

103
00:04:43.340 --> 00:04:47.410
And then from that function, we return the session

104
00:04:47.410 --> 00:04:52.240
if there is one, the data, the role if this person has one,

105
00:04:52.240 --> 00:04:55.570
and then we will programmatically access

106
00:04:57.841 --> 00:04:58.674
the value here.

107
00:04:58.674 --> 00:05:02.150
So it is permission and that permission variable

108
00:05:02.150 --> 00:05:03.980
is going to be equal to, again

109
00:05:03.980 --> 00:05:05.660
I know you're probably sick of me saying this but

110
00:05:05.660 --> 00:05:09.223
it will be equal to each of these that we have here.

111
00:05:10.510 --> 00:05:12.790
Finally, we were, we'll just coerce that

112
00:05:12.790 --> 00:05:14.440
into a true Boolean.

113
00:05:14.440 --> 00:05:16.340
So we'll put two bangs in front of it,

114
00:05:17.180 --> 00:05:20.123
and we are up and running.

115
00:05:21.600 --> 00:05:24.380
Then we can take those generated permissions

116
00:05:24.380 --> 00:05:25.530
and spread them into this

117
00:05:25.530 --> 00:05:28.310
so we don't need to manually type each of these now.

118
00:05:28.310 --> 00:05:30.260
We will simply spread them into there,

119
00:05:30.260 --> 00:05:32.710
and the reason why I'm spreading them in,

120
00:05:32.710 --> 00:05:35.130
is because I wanna show you that you can additionally,

121
00:05:35.130 --> 00:05:38.180
in addition to having all of these permissions

122
00:05:38.180 --> 00:05:39.630
you can also add your own.

123
00:05:39.630 --> 00:05:42.990
So if you wanted to make a additional permission

124
00:05:42.990 --> 00:05:46.490
called isawesome, you could do that.

125
00:05:46.490 --> 00:05:49.690
That isawesome we'll take in the session

126
00:05:49.690 --> 00:05:52.653
with a type of list access arcs.

127
00:05:53.520 --> 00:05:56.840
And then from there, we will say

128
00:05:56.840 --> 00:05:58.420
if the session

129
00:05:59.477 --> 00:06:03.810
.data.name.includes("wes")

130
00:06:03.810 --> 00:06:05.090
return, true

131
00:06:06.130 --> 00:06:07.893
they are awesome.

132
00:06:08.870 --> 00:06:11.003
Otherwise we return false,

133
00:06:11.860 --> 00:06:14.650
and we can even go a little step further and

134
00:06:14.650 --> 00:06:16.073
simply just say this.

135
00:06:17.580 --> 00:06:18.870
We can just return the value of this

136
00:06:18.870 --> 00:06:20.160
'cause that will return a Boolean.

137
00:06:20.160 --> 00:06:23.113
So is return, boom,

138
00:06:23.950 --> 00:06:25.463
get rid of all that.

139
00:06:29.270 --> 00:06:31.840
And this is just an example of being able to add

140
00:06:31.840 --> 00:06:34.150
an additional permission function

141
00:06:34.150 --> 00:06:36.830
on top of all the ones that have been generated

142
00:06:36.830 --> 00:06:39.630
'cause sometimes there is the ability to add

143
00:06:39.630 --> 00:06:42.120
in additional ones that is not in the UI.

144
00:06:42.120 --> 00:06:45.110
So now we have our permissions in place which is,

145
00:06:45.110 --> 00:06:46.430
let's write a little comment there,

146
00:06:46.430 --> 00:06:48.330
permissions check.

147
00:06:48.330 --> 00:06:51.263
If somebody meets a criteria yes or no,

148
00:06:52.370 --> 00:06:54.580
so more than likely it's going to be,

149
00:06:54.580 --> 00:06:56.300
do they have that permission

150
00:06:56.300 --> 00:06:59.930
in the role of their currently logged in user?

151
00:06:59.930 --> 00:07:01.590
And now what we're gonna get into

152
00:07:01.590 --> 00:07:04.840
is rule-based functions.

153
00:07:04.840 --> 00:07:06.680
And we'll pick that up in the next video,

154
00:07:06.680 --> 00:07:09.300
but these allow us to be a little bit more flexible,

155
00:07:09.300 --> 00:07:12.753
with different rules, as well as who owns an item.

