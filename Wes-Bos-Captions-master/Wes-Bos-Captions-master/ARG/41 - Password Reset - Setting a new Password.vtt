WEBVTT

1
00:00:01.640 --> 00:00:02.590
<v Instructor>All right, now let's cut up</v>

2
00:00:02.590 --> 00:00:03.920
the actual reset page.

3
00:00:03.920 --> 00:00:05.040
What we're going to do is we're actually just

4
00:00:05.040 --> 00:00:08.550
going to manually pass the token in via the query param

5
00:00:08.550 --> 00:00:10.930
and then in the next video when you do emailing,

6
00:00:10.930 --> 00:00:13.947
we'll obviously auto-generate that via URL.

7
00:00:15.430 --> 00:00:17.977
So we need a separate page because the reset

8
00:00:17.977 --> 00:00:22.090
is going to be passed like I said via the query param.

9
00:00:22.090 --> 00:00:24.950
So we need to go into our pages directory here

10
00:00:24.950 --> 00:00:26.400
and we'll make a new file

11
00:00:26.400 --> 00:00:30.260
and we'll call it reset.js, lowercase r.

12
00:00:30.260 --> 00:00:35.260
Export default function, reset page and then return a div.

13
00:00:41.290 --> 00:00:45.580
And inside of that div, we need our reset component.

14
00:00:45.580 --> 00:00:50.433
Let's just say a paragraph tag, reset your password.

15
00:00:52.120 --> 00:00:56.430
Now if I go to forward slash reset, it's there.

16
00:00:56.430 --> 00:00:57.980
And then I'm going to pass

17
00:00:57.980 --> 00:01:00.930
the token in via query param.

18
00:01:00.930 --> 00:01:05.893
So if I go here and say reset token is equal to that,

19
00:01:07.070 --> 00:01:09.050
then we should be able to access

20
00:01:09.050 --> 00:01:12.870
that token via the page props.

21
00:01:12.870 --> 00:01:14.247
Previously, we've been using use router

22
00:01:14.247 --> 00:01:16.540
but let's just take a look at the,

23
00:01:16.540 --> 00:01:18.120
what the props are here.

24
00:01:18.120 --> 00:01:22.833
Props log props, go here.

25
00:01:24.910 --> 00:01:27.760
There we go, query token.

26
00:01:27.760 --> 00:01:32.650
So that's another way to get values from the URL.

27
00:01:32.650 --> 00:01:34.040
Is that if you're at a page level,

28
00:01:34.040 --> 00:01:36.200
you can get them via props.

29
00:01:36.200 --> 00:01:40.060
So we can de-structure the query

30
00:01:42.420 --> 00:01:47.210
and then let's just try to put reset your password

31
00:01:47.210 --> 00:01:52.000
and we'll put the query.token in there good.

32
00:01:52.000 --> 00:01:53.000
So that's showing up.

33
00:01:53.000 --> 00:01:54.960
One more thing is if somebody tries

34
00:01:54.960 --> 00:01:56.820
to go to the reset page directly,

35
00:01:56.820 --> 00:01:59.000
we should probably check if there is a token.

36
00:01:59.000 --> 00:02:03.050
So if there is no query token,

37
00:02:03.050 --> 00:02:05.358
so if there's no query or there's no query.token,

38
00:02:05.358 --> 00:02:07.830
nice little question mark I love that.

39
00:02:07.830 --> 00:02:12.830
Return just a paragraph, sorry you must supply a token

40
00:02:16.070 --> 00:02:17.720
and we could even go as far to just

41
00:02:17.720 --> 00:02:22.720
render out the request to reset.

42
00:02:22.870 --> 00:02:24.625
Let's do it, let's do it.

43
00:02:24.625 --> 00:02:29.140
Let's change this to a div and then we could

44
00:02:29.140 --> 00:02:32.757
just say request reset and import that.

45
00:02:36.610 --> 00:02:38.390
And now if I visit this URL

46
00:02:38.390 --> 00:02:43.390
and I don't pass in and it renders out the reset

47
00:02:45.800 --> 00:02:47.511
and then if I do pass a token,

48
00:02:47.511 --> 00:02:52.511
we should render out the actual reset form, cool.

49
00:02:53.040 --> 00:02:55.160
So we'll go back into our components folder here

50
00:02:55.160 --> 00:02:56.320
and make a new file.

51
00:02:56.320 --> 00:02:59.640
Actually, let's keep going from what we had last time

52
00:02:59.640 --> 00:03:01.480
because this stuff is very much the same.

53
00:03:01.480 --> 00:03:03.654
So request reset, save a copy

54
00:03:03.654 --> 00:03:06.820
and we'll just call it reset.js

55
00:03:08.830 --> 00:03:11.830
and the reset is going to take a few things.

56
00:03:11.830 --> 00:03:14.640
So we have our email, we have our password

57
00:03:14.640 --> 00:03:17.275
and then we also have the token that gets passed.

58
00:03:17.275 --> 00:03:22.275
Then we'll go down here and duplicate this.

59
00:03:23.310 --> 00:03:25.265
Actually, we can just go to our signup

60
00:03:25.265 --> 00:03:30.265
component and grab the password label.

61
00:03:35.160 --> 00:03:36.840
I'll put it in here okay.

62
00:03:41.370 --> 00:03:43.340
Now, let's render out this reset component

63
00:03:43.340 --> 00:03:45.520
so we can see what we're working with.

64
00:03:45.520 --> 00:03:48.910
So we'll get a reset js, go here.

65
00:03:48.910 --> 00:03:53.910
Reset and oh, it's not auto importing because

66
00:03:55.240 --> 00:03:57.233
we didn't rename the component.

67
00:04:00.610 --> 00:04:02.490
Reset, here we go.

68
00:04:02.490 --> 00:04:04.793
Now, go here and see if we can auto import it.

69
00:04:07.070 --> 00:04:10.443
Not showing up, that's fine.

70
00:04:10.443 --> 00:04:14.823
We'll just duplicate this color reset.

71
00:04:16.750 --> 00:04:17.583
Here we go.

72
00:04:17.583 --> 00:04:19.770
Request a password reset.

73
00:04:19.770 --> 00:04:22.640
And then I guess this now needs to say reset

74
00:04:25.930 --> 00:04:27.270
your password okay.

75
00:04:32.622 --> 00:04:36.740
Next, I think we should do the actual mutation.

76
00:04:36.740 --> 00:04:40.630
So the mutation is going to just be called,

77
00:04:40.630 --> 00:04:44.313
not request but just simply reset mutation.

78
00:04:45.350 --> 00:04:47.090
And the method that we call is going

79
00:04:47.090 --> 00:04:52.090
to be called redeem user password reset token

80
00:04:52.450 --> 00:04:55.640
that takes in the email, but it also

81
00:04:55.640 --> 00:04:59.460
takes in the token which will be our token variable.

82
00:04:59.460 --> 00:05:04.460
We have to actually pass those and the password as well,

83
00:05:04.650 --> 00:05:06.273
which will be oops,

84
00:05:06.273 --> 00:05:11.030
just password which is our password variable.

85
00:05:11.030 --> 00:05:13.970
Then we can go in here and modify this.

86
00:05:13.970 --> 00:05:18.660
So we need email, we need password

87
00:05:20.730 --> 00:05:22.033
and we need the token.

88
00:05:25.440 --> 00:05:29.000
So we have this mutation takes in three things,

89
00:05:29.000 --> 00:05:31.620
calls redeem, password reset, passes at these

90
00:05:31.620 --> 00:05:32.755
three arguments.

91
00:05:32.755 --> 00:05:36.170
Back from there, you either get a code and or a message

92
00:05:36.170 --> 00:05:38.480
or nothing if it's successful.

93
00:05:38.480 --> 00:05:41.200
We have our function with our use form.

94
00:05:41.200 --> 00:05:43.100
Then we have our mutation.

95
00:05:43.100 --> 00:05:45.755
We've updated that to reset mutation here.

96
00:05:45.755 --> 00:05:47.750
You don't need any of these here.

97
00:05:47.750 --> 00:05:52.700
So we can just get rid of that then we have our submit here.

98
00:05:52.700 --> 00:05:57.613
Actually, this can be renamed to reset.

99
00:06:00.900 --> 00:06:02.040
It doesn't matter what it's called

100
00:06:02.040 --> 00:06:03.610
because we're just restructuring the first item

101
00:06:03.610 --> 00:06:06.115
but obviously not sign up that's not what it's called.

102
00:06:06.115 --> 00:06:11.115
Reset your password then successfully is going

103
00:06:11.770 --> 00:06:16.060
to be if data.redeem user password token

104
00:06:16.060 --> 00:06:18.413
is equal to no success.

105
00:06:22.890 --> 00:06:26.020
You can now sign in.

106
00:06:26.020 --> 00:06:28.120
Actually, we're going to change that in just a second,

107
00:06:28.120 --> 00:06:30.853
but you can keep it like that for now.

108
00:06:32.020 --> 00:06:35.710
So I have my token.

109
00:06:35.710 --> 00:06:40.330
Now, if I want to update it.

110
00:06:40.330 --> 00:06:42.330
So it westboss@g-mail.com.

111
00:06:42.330 --> 00:06:46.500
My new password will be dogs1234.

112
00:06:46.500 --> 00:06:47.755
I'm gonna open up my dev tools.

113
00:06:47.755 --> 00:06:51.120
Just make sure if any errors happen I see them.

114
00:06:51.120 --> 00:06:54.290
There we go.

115
00:06:54.290 --> 00:06:59.290
It looks like it's successfully reset data, there we go.

116
00:07:03.570 --> 00:07:04.690
Oh, no, there we go.

117
00:07:04.690 --> 00:07:05.595
There's an error.

118
00:07:05.595 --> 00:07:09.600
So we didn't properly catch that error

119
00:07:13.595 --> 00:07:15.160
because it looks like the error was not

120
00:07:15.160 --> 00:07:16.190
coming into this one.

121
00:07:16.190 --> 00:07:17.785
So remember that way we did it previously

122
00:07:17.785 --> 00:07:20.505
where sometimes the error will come back.

123
00:07:20.505 --> 00:07:22.970
So what we'll have to do

124
00:07:22.970 --> 00:07:25.453
is not de-structure the error here.

125
00:07:27.640 --> 00:07:31.060
And what we'll do is we'll make an error variable

126
00:07:31.060 --> 00:07:34.030
So say const error is equal

127
00:07:34.030 --> 00:07:39.030
to if the data.redeem password reset token.

128
00:07:44.770 --> 00:07:46.625
I can put a question mark on the end there.

129
00:07:46.625 --> 00:07:51.625
If that has a code, then our error will be that.

130
00:08:02.920 --> 00:08:07.310
Otherwise, it is going to just be undefined.

131
00:08:07.310 --> 00:08:10.967
There is no error and then we'll pass it to here.

132
00:08:23.810 --> 00:08:26.010
I'm gonna console log the error

133
00:08:26.010 --> 00:08:28.173
to see if we actually have an error.

134
00:08:29.430 --> 00:08:31.170
It says undefined, okay.

135
00:08:31.170 --> 00:08:33.000
Something went wrong.

136
00:08:33.000 --> 00:08:36.687
If data.redeemuserpasswordresettoken.code,

137
00:08:43.990 --> 00:08:48.990
then the error is this thing with a code

138
00:08:49.750 --> 00:08:52.570
and a message otherwise it's undefined.

139
00:08:52.570 --> 00:08:53.790
So it's logs is undefined,

140
00:08:53.790 --> 00:08:55.414
maybe we have to try it again.

141
00:08:55.414 --> 00:09:00.414
So it was at westboss@gmail.com, test.

142
00:09:02.654 --> 00:09:03.560
Here we go.

143
00:09:03.560 --> 00:09:05.820
Shoot the email value you provided

144
00:09:05.820 --> 00:09:07.690
didn't identify any users.

145
00:09:07.690 --> 00:09:08.664
Okay, good.

146
00:09:08.664 --> 00:09:13.020
Now, if I do pass my proper

147
00:09:13.020 --> 00:09:17.090
email address with my new password dogs1234,

148
00:09:17.090 --> 00:09:20.303
we should see invalid token mismatch.

149
00:09:21.410 --> 00:09:23.570
Yeah the auth token provided is incorrect.

150
00:09:23.570 --> 00:09:25.540
Okay, good, so we did that.

151
00:09:25.540 --> 00:09:28.570
The reason why that's throwing is because we're actually

152
00:09:28.570 --> 00:09:31.970
not passing the token along for the ride.

153
00:09:31.970 --> 00:09:35.270
What we did here is we are assuming

154
00:09:35.270 --> 00:09:39.000
that the token here is in the form,

155
00:09:39.000 --> 00:09:40.230
but what we can do is we can actually

156
00:09:40.230 --> 00:09:43.540
just stick the token that we get in the page in there.

157
00:09:43.540 --> 00:09:45.070
And the way that we're going to do that

158
00:09:45.070 --> 00:09:50.070
is we'll go to our reset page, here we go.

159
00:09:50.140 --> 00:09:54.380
We'll say the token is equal to query.token

160
00:09:54.380 --> 00:09:56.393
So I'll pass it into our reset function

161
00:09:56.393 --> 00:09:59.640
or reset component then we'll de-structure

162
00:09:59.640 --> 00:10:03.380
that token here and then we'll pass that token

163
00:10:03.380 --> 00:10:08.380
to our state and when the form submits,

164
00:10:10.400 --> 00:10:12.883
that token should be passed along for the ride

165
00:10:12.883 --> 00:10:17.883
via our variables which happens right here.

166
00:10:25.390 --> 00:10:29.350
So let's try it again westboss@gmail.com.

167
00:10:29.350 --> 00:10:33.023
My new password will be dogs1234,

168
00:10:34.650 --> 00:10:36.433
go ahead and request a reset.

169
00:10:38.000 --> 00:10:39.680
Our token has expired.

170
00:10:39.680 --> 00:10:41.540
Oh man, this is great though (laughs).

171
00:10:41.540 --> 00:10:44.070
It's showing us that our error handling is actually working

172
00:10:44.070 --> 00:10:45.380
for all the different situations.

173
00:10:45.380 --> 00:10:46.213
Okay, good.

174
00:10:46.213 --> 00:10:48.243
So the fact that that has expired

175
00:10:48.243 --> 00:10:53.243
means that I need to go back to the sign in page.

176
00:10:55.330 --> 00:10:58.720
So I'll go to sign in actually

177
00:11:01.410 --> 00:11:06.160
and I request a password reset, success.

178
00:11:06.160 --> 00:11:07.340
Check your email for a link.

179
00:11:07.340 --> 00:11:09.470
We don't have that set up yet, but here it is.

180
00:11:09.470 --> 00:11:11.130
Here's the new token.

181
00:11:11.130 --> 00:11:13.510
Then I'll go back there and put the new

182
00:11:13.510 --> 00:11:14.614
token in the URL bar.

183
00:11:14.614 --> 00:11:19.614
Now let's try it dogs 123,

184
00:11:27.414 --> 00:11:30.040
value must be at least eight characters long.

185
00:11:30.040 --> 00:11:30.873
Okay, cool.

186
00:11:30.873 --> 00:11:35.800
Oh man so it also is throwing an error.

187
00:11:38.520 --> 00:11:43.520
This is a bit odd that the error in keystone sometimes

188
00:11:44.750 --> 00:11:48.720
is successfully error and then also sometimes

189
00:11:50.254 --> 00:11:52.010
the error is being thrown which we catch

190
00:11:52.010 --> 00:11:53.203
in our using mutation.

191
00:11:53.203 --> 00:11:55.040
So I'll show you how to handle that.

192
00:11:55.040 --> 00:11:56.250
It's a little bit odd

193
00:11:56.250 --> 00:11:57.920
but that's the way the cookie crumbles.

194
00:11:57.920 --> 00:11:59.460
Sometimes software is like that

195
00:11:59.460 --> 00:12:01.270
and you got to account for it.

196
00:12:01.270 --> 00:12:03.850
So we will de-structure the error from here

197
00:12:03.850 --> 00:12:06.740
and then we'll make a new variable here called

198
00:12:08.190 --> 00:12:09.967
successful error (laughs).

199
00:12:11.360 --> 00:12:13.990
Let's call it that so we know how silly it is.

200
00:12:13.990 --> 00:12:17.320
So we have an error or a successful error.

201
00:12:17.320 --> 00:12:19.241
And then here, what we can do is we can pass

202
00:12:19.241 --> 00:12:21.773
the error or the successful error

203
00:12:21.773 --> 00:12:24.390
and what that will do is it will just pass the error.

204
00:12:24.390 --> 00:12:26.300
If there is one otherwise it will try to pass

205
00:12:26.300 --> 00:12:29.670
the successful error which might be undefined.

206
00:12:29.670 --> 00:12:34.202
So I'll give that a save and let's try it now.

207
00:12:34.202 --> 00:12:39.202
westboss@gmail.com 123 short password too short.

208
00:12:39.800 --> 00:12:41.690
It should error out here we go.

209
00:12:41.690 --> 00:12:45.079
Our tokens are single use and the, oh, no.

210
00:12:45.079 --> 00:12:47.102
So I gotta go get another one.

211
00:12:47.102 --> 00:12:51.603
All right, here we go westboss@gmail.com.

212
00:12:54.030 --> 00:12:57.693
Cool as my new token placed it in

213
00:13:00.582 --> 00:13:05.510
westboss@gmail.com west west west

214
00:13:05.510 --> 00:13:07.200
Oh no, I'm going to do it just West.

215
00:13:07.200 --> 00:13:10.100
So it's short there we go.

216
00:13:10.100 --> 00:13:12.520
So now we actually caught the throne error

217
00:13:12.520 --> 00:13:14.700
which is shoot password minimum length must

218
00:13:14.700 --> 00:13:16.491
be at least eight characters long.

219
00:13:16.491 --> 00:13:21.163
So I think now if we try to reset it again,

220
00:13:22.610 --> 00:13:24.450
they're only single use.

221
00:13:24.450 --> 00:13:29.290
That seems weird because like what if it errors out

222
00:13:29.290 --> 00:13:31.610
I'll log an issue with keystone that I don't think

223
00:13:31.610 --> 00:13:33.020
that should be the case.

224
00:13:33.020 --> 00:13:35.420
I think that you should be able to have a couple shots

225
00:13:35.420 --> 00:13:37.260
that are actually doing it with your password reset

226
00:13:37.260 --> 00:13:40.123
because now we've got to go back to my email.

227
00:13:41.000 --> 00:13:43.813
I think that stops people from having okay.

228
00:13:43.813 --> 00:13:48.163
There's my new token, put it in there.

229
00:13:50.090 --> 00:13:52.220
Let's westboss@gmail.com.

230
00:13:52.220 --> 00:13:55.573
Now I'm gonna do just West, West West again, success.

231
00:13:57.540 --> 00:13:59.750
You can now sign in.

232
00:13:59.750 --> 00:14:00.970
Whew, we did it.

233
00:14:00.970 --> 00:14:04.270
All right so that is the password reset flow

234
00:14:04.270 --> 00:14:05.450
on the client side.

235
00:14:05.450 --> 00:14:06.730
Last thing we need to do now

236
00:14:06.730 --> 00:14:09.400
is the server side of sending email

237
00:14:09.400 --> 00:14:11.250
and we'll hit that in the next video.

