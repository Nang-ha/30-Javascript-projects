WEBVTT

1
00:00:00.198 --> 00:00:01.619
(logo whooshes)

2
00:00:01.619 --> 00:00:03.050
<v Presenter>All right. Now, we're gonna get into</v>

3
00:00:03.050 --> 00:00:06.770
actually emailing the password reset token to the user

4
00:00:06.770 --> 00:00:08.970
so they can go ahead and reset it.

5
00:00:08.970 --> 00:00:11.390
And that's gonna happen inside of here.

6
00:00:11.390 --> 00:00:12.970
So in order to send the email,

7
00:00:12.970 --> 00:00:15.210
we need to write a little bit of custom,

8
00:00:15.210 --> 00:00:17.410
node.js code, node.j

9
00:00:17.410 --> 00:00:18.243
What am I saying?

10
00:00:18.243 --> 00:00:19.966
It's custom node code.

11
00:00:19.966 --> 00:00:24.966
So to do that, we'll go into our lib folder here.

12
00:00:24.980 --> 00:00:29.510 line:15% 
And we're creating a new file called mail.ts

13
00:00:31.230 --> 00:00:33.750 line:15% 
And then we create what's called a transporter.

14
00:00:33.750 --> 00:00:37.900 line:15% 
A transporter is going to allow us to hook up to

15
00:00:37.900 --> 00:00:41.480
an SMTP API, and send out emails.

16
00:00:41.480 --> 00:00:45.210
Now, when you're doing sending of email in development

17
00:00:45.210 --> 00:00:48.520
it's best to use, what's called a fake surface

18
00:00:48.520 --> 00:00:51.070
or a Mailtrap or something like that.

19
00:00:51.070 --> 00:00:52.830
In the past I've used Mailtrap,

20
00:00:52.830 --> 00:00:54.650
which is really good if you've got a team.

21
00:00:54.650 --> 00:00:55.580
It's a paid,

22
00:00:55.580 --> 00:00:56.940
has a really good free option

23
00:00:56.940 --> 00:01:00.480
but also has a paid option, which is pretty nifty.

24
00:01:00.480 --> 00:01:03.060
And then lately I've been using this a ethereal.email

25
00:01:03.060 --> 00:01:04.780
'cause you don't even have to sign up for the thing.

26
00:01:04.780 --> 00:01:08.190
It just gives you a set of username and password,

27
00:01:08.190 --> 00:01:10.430
and you can go ahead and use it.

28
00:01:10.430 --> 00:01:13.030
The only difference between these traps

29
00:01:13.030 --> 00:01:17.420
and fake SMTP and production, when you deploy this thing,

30
00:01:17.420 --> 00:01:21.080
is that you'll need to sign up for a transactional email.

31
00:01:21.080 --> 00:01:25.590
Servers like Postmark or SendGrid or something like that.

32
00:01:25.590 --> 00:01:28.300
And those will allow you to send actual or real emails

33
00:01:28.300 --> 00:01:31.410
to your users, instead of just trapping them

34
00:01:31.410 --> 00:01:34.440
as fake, 'cause you you never wanna send real email

35
00:01:34.440 --> 00:01:37.970
in development, just because you might accidentally

36
00:01:37.970 --> 00:01:40.470
send them to real customers and things get confusing.

37
00:01:40.470 --> 00:01:43.230
So, that's great.

38
00:01:43.230 --> 00:01:44.527
So we're gonna go to ethereal.email

39
00:01:44.527 --> 00:01:48.610
and you can go ahead and click on 'Create Ethereal Account.'

40
00:01:48.610 --> 00:01:49.443
Boom!

41
00:01:49.443 --> 00:01:51.570
And then it just gives you

42
00:01:51.570 --> 00:01:55.410
a username and a password, which is great.

43
00:01:55.410 --> 00:01:57.860
So we need to put this username and your password

44
00:01:57.860 --> 00:01:59.700
in our environmental file.

45
00:01:59.700 --> 00:02:01.600
Because you don't wanna hardcode these values

46
00:02:01.600 --> 00:02:02.570
both because they're different

47
00:02:02.570 --> 00:02:03.950
in development and production.

48
00:02:03.950 --> 00:02:06.240
And second, 'cause like you shouldn't have

49
00:02:06.240 --> 00:02:08.550
sensitive information like that in your code files,

50
00:02:08.550 --> 00:02:11.090
should always be an environmental variable file.

51
00:02:11.090 --> 00:02:14.630
So we have here, if you look we've got our mail host,

52
00:02:14.630 --> 00:02:16.230
our port, our user, and our password.

53
00:02:16.230 --> 00:02:18.180
These user and password needs to be replaced

54
00:02:18.180 --> 00:02:20.650
with these values right here.

55
00:02:20.650 --> 00:02:23.203
So go ahead and grab that sucker.

56
00:02:24.780 --> 00:02:25.840
Boom!

57
00:02:25.840 --> 00:02:27.193
And then the password.

58
00:02:30.580 --> 00:02:32.143
Goes in here.

59
00:02:34.470 --> 00:02:37.300
And then we need to restart our application.

60
00:02:37.300 --> 00:02:40.960
So go ahead and kill it, the backend and re-run it.

61
00:02:40.960 --> 00:02:44.320
And then what that will do is, it will put our new values

62
00:02:44.320 --> 00:02:48.930
into our environmental variables.

63
00:02:48.930 --> 00:02:52.120
Then we'll go back to mail and create our transport.

64
00:02:52.120 --> 00:02:54.040
So in here, our transport will hook up

65
00:02:54.040 --> 00:02:55.440
to our SMTP credentials.

66
00:02:55.440 --> 00:02:58.123
So say, const transport is equal to,

67
00:02:59.030 --> 00:03:00.250
actually,
(chuckles)

68
00:03:00.250 --> 00:03:01.083
it's kind of funny

69
00:03:01.083 --> 00:03:05.150
because they give you the Nodemailer package

70
00:03:05.150 --> 00:03:07.370
configuration right here.

71
00:03:07.370 --> 00:03:08.750
You could just copy paste it.

72
00:03:08.750 --> 00:03:09.990
Ours is gonna be a little bit different.

73
00:03:09.990 --> 00:03:11.960
So, I'll do it with you here.

74
00:03:11.960 --> 00:03:14.070
So I'll say, createTransport.

75
00:03:15.170 --> 00:03:18.060
And you can see that it wants to auto import it

76
00:03:18.060 --> 00:03:20.050
straight from the Nodemailer package.

77
00:03:20.050 --> 00:03:22.460
That's what we use to send email and nodejs.

78
00:03:22.460 --> 00:03:23.293
So go ahead and do that.

79
00:03:23.293 --> 00:03:25.800
And you see it's importing it right there.

80
00:03:25.800 --> 00:03:30.210
Then to that, we have a host.

81
00:03:30.210 --> 00:03:34.533
And the host will be process.env.MAIL_HOST,

82
00:03:37.352 --> 00:03:40.167
and then the port is MAIL_PORT,

83
00:03:42.610 --> 00:03:45.090
Then we have an auth inside of there,

84
00:03:45.090 --> 00:03:46.393
which has our user.

85
00:03:48.580 --> 00:03:50.317
And MAIL_USER,

86
00:03:51.580 --> 00:03:54.140
and our password,

87
00:03:54.140 --> 00:03:55.367
just MAIL_PASS.

88
00:03:57.410 --> 00:03:59.950
Make sure you do PASS, and not PASSWORD.

89
00:03:59.950 --> 00:04:02.340
That's a common one that could get you.

90
00:04:02.340 --> 00:04:03.210
All right. Next thing we need

91
00:04:03.210 --> 00:04:05.050
is a little function that's gonna template out

92
00:04:05.050 --> 00:04:06.130
some emails for us.

93
00:04:06.130 --> 00:04:08.920
So, there is entire frameworks out there

94
00:04:08.920 --> 00:04:13.920
for designing and templating, and rendering out HTML emails.

95
00:04:16.010 --> 00:04:19.150
But honestly, all we need is just a simple couple of lines,

96
00:04:19.150 --> 00:04:21.020
and we don't necessarily need something like that.

97
00:04:21.020 --> 00:04:22.870
So we're just gonna have a function called,

98
00:04:22.870 --> 00:04:23.703
makeANiceEmail.

99
00:04:25.830 --> 00:04:29.720
And that takes in some text, and that text will be a string.

100
00:04:29.720 --> 00:04:31.970
So we just type it there, that's part of TypeScript.

101
00:04:31.970 --> 00:04:33.560
This part is TypeScript.

102
00:04:33.560 --> 00:04:35.973
And then we will return backticks.

103
00:04:36.900 --> 00:04:41.760
And then in there you wanna div, expand abbreviation.

104
00:04:41.760 --> 00:04:42.670
That doesn't work.

105
00:04:42.670 --> 00:04:43.503
It's gotta,

106
00:04:43.503 --> 00:04:45.290
you gotta type it like a sucker.

107
00:04:45.290 --> 00:04:47.200
Ah, there we go. That worked.

108
00:04:47.200 --> 00:04:49.570
And in here, we'll give it some inline styles,

109
00:04:49.570 --> 00:04:51.910
say border, 1px,

110
00:04:51.910 --> 00:04:53.710
and maybe we'll do these each on their own lines.

111
00:04:53.710 --> 00:04:55.713
So it's a little bit easier to write.

112
00:04:57.720 --> 00:05:02.720
1px solid black, padding 20px,

113
00:05:04.530 --> 00:05:05.893
font-family;

114
00:05:06.750 --> 00:05:08.443
sans-serif.

115
00:05:11.240 --> 00:05:16.020
Line height is two, and font size is 20px.

116
00:05:16.020 --> 00:05:19.713
Then inside of this div, you want an h2 tag.

117
00:05:22.330 --> 00:05:23.433
Say, Hello There.

118
00:05:24.813 --> 00:05:28.230
And then you want a paragraph that has the text

119
00:05:28.230 --> 00:05:29.900
that has passed in.

120
00:05:29.900 --> 00:05:32.523
And then you can sign it off with another paragraph,

121
00:05:33.860 --> 00:05:38.310
that says, a kissy emoji, Wes Bos

122
00:05:39.750 --> 00:05:41.720
and put your own name in there.

123
00:05:41.720 --> 00:05:43.670
Finally, we need an actual function

124
00:05:43.670 --> 00:05:44.930
that will send the email.

125
00:05:44.930 --> 00:05:47.350
So, we'll say async function

126
00:05:47.350 --> 00:05:48.500
sendPasswordResetEmail.

127
00:05:53.380 --> 00:05:55.970
And that will take in the resetToken,

128
00:05:55.970 --> 00:05:57.560
which is a string,

129
00:05:57.560 --> 00:06:01.160
and a to, which is also a string.

130
00:06:01.160 --> 00:06:03.040
That's an email address.

131
00:06:03.040 --> 00:06:04.960
And then inside of there,

132
00:06:04.960 --> 00:06:06.690
we will email them a token.

133
00:06:06.690 --> 00:06:08.950
Email the user a token.

134
00:06:08.950 --> 00:06:10.407
So let's say, const,

135
00:06:12.550 --> 00:06:14.730
the info that comes back is called

136
00:06:14.730 --> 00:06:16.913
await transport.sendMail.

137
00:06:18.826 --> 00:06:21.460
And the email that we will send takes an object,

138
00:06:21.460 --> 00:06:26.410
to, well the to, is to whatever gets passed into this one.

139
00:06:26.410 --> 00:06:28.330
We're gonna be using it via right here.

140
00:06:28.330 --> 00:06:30.990
We have the arguments for the actual user here.

141
00:06:30.990 --> 00:06:33.680
So we'll pass those into that function.

142
00:06:33.680 --> 00:06:34.850
So, to.

143
00:06:34.850 --> 00:06:38.930 line:15% 
From is going to be wes@wesbos.com

144
00:06:38.930 --> 00:06:40.863
or whatever you want.

145
00:06:41.790 --> 00:06:46.790
And the subject is going to be your password reset token.

146
00:06:50.880 --> 00:06:55.390
And the HTML of the email is going to be

147
00:06:55.390 --> 00:06:57.350
makeANiceEmail.

148
00:06:57.350 --> 00:07:01.010
And you pass the one argument

149
00:07:01.010 --> 00:07:04.090
of makeANiceEmail, which is the text,

150
00:07:04.090 --> 00:07:06.290
and that will be backticks.

151
00:07:06.290 --> 00:07:07.883
And we'll say right here,

152
00:07:08.730 --> 00:07:13.233
Your Password Reset Token is here!

153
00:07:17.340 --> 00:07:21.320
And then give it a new line.

154
00:07:21.320 --> 00:07:25.433
Says, a href is equal to.

155
00:07:27.338 --> 00:07:29.820
And then, Click Here to reset.

156
00:07:29.820 --> 00:07:33.210
And then the href is going to be

157
00:07:33.210 --> 00:07:35.590
process.env.FRONTEND_URL.

158
00:07:39.680 --> 00:07:42.610
Remember in our dot env, we've coded this here

159
00:07:42.610 --> 00:07:44.300
because we're in the backend right now.

160
00:07:44.300 --> 00:07:47.300
We need to know where the front end is actually running.

161
00:07:47.300 --> 00:07:48.887
So we have FRONTEND_URL,

162
00:07:49.930 --> 00:07:53.490
and then it is forward slash reset.

163
00:07:53.490 --> 00:07:55.010
And then the query per rem

164
00:07:55.010 --> 00:07:57.490
is gonna be token is equal to,

165
00:07:57.490 --> 00:08:00.830
and then we will interpolate the reset token

166
00:08:00.830 --> 00:08:03.730
that was passed into this email right here.

167
00:08:03.730 --> 00:08:05.310
Okay. So that's going so far.

168
00:08:05.310 --> 00:08:07.930
Let's see, it's yelling at us for something here.

169
00:08:07.930 --> 00:08:11.703
Unsafe assignment of any value,

170
00:08:12.780 --> 00:08:14.070
make a nice email.

171
00:08:14.070 --> 00:08:14.903
Oh, you know what?

172
00:08:14.903 --> 00:08:19.903
We forgot to type the returned value of this.

173
00:08:19.980 --> 00:08:21.230
That's one thing.

174
00:08:21.230 --> 00:08:22.570
That wasn't the issue.

175
00:08:22.570 --> 00:08:26.210
Let's go into the next little TypeScript issue that we have.

176
00:08:26.210 --> 00:08:27.043
All right.

177
00:08:27.043 --> 00:08:27.930
We've got some red underlines here.

178
00:08:27.930 --> 00:08:31.080
Let's take a quick look at why that's happening.

179
00:08:31.080 --> 00:08:36.080
So the error is, unsafe assignment value of any.

180
00:08:36.220 --> 00:08:41.000
Okay. So it's mad that the send mail function

181
00:08:42.310 --> 00:08:44.450
is returning, any.

182
00:08:44.450 --> 00:08:47.410
And, any in TypeScript is sort of the like important.

183
00:08:47.410 --> 00:08:49.700
If you think of CSS where you do bang important,

184
00:08:49.700 --> 00:08:50.790
you're not supposed to use it,

185
00:08:50.790 --> 00:08:53.360
but it's there in case you need it.

186
00:08:53.360 --> 00:08:57.290
So these types for Nodemailer are not very good.

187
00:08:57.290 --> 00:08:58.350
It should be returning

188
00:08:58.350 --> 00:09:01.570
like a custom type of Nodemailer response.

189
00:09:01.570 --> 00:09:02.990
So what we could do here is,

190
00:09:02.990 --> 00:09:05.173
we just like make a quick little interface.

191
00:09:06.400 --> 00:09:08.450
Mail response.

192
00:09:08.450 --> 00:09:11.170
And then I don't know what comes back

193
00:09:12.300 --> 00:09:16.650
from send mail, but most just maybe it's a message

194
00:09:16.650 --> 00:09:19.183
that is a string, a lowercase string.

195
00:09:21.180 --> 00:09:23.683
And then we could do info,

196
00:09:25.970 --> 00:09:27.553
as a mail response.

197
00:09:29.213 --> 00:09:30.460
And then here we can say

198
00:09:30.460 --> 00:09:32.800
as MailResponse.

199
00:09:32.800 --> 00:09:34.453
And here we don't even need,

200
00:09:38.169 --> 00:09:39.200
I don't think we need that.

201
00:09:39.200 --> 00:09:43.020
Okay. So that is one way to get around it.

202
00:09:43.020 --> 00:09:44.970
When we consolelog this info,

203
00:09:44.970 --> 00:09:49.170
we'll be able to update, what it is actually returning.

204
00:09:49.170 --> 00:09:50.630
If you don't see those red underlines,

205
00:09:50.630 --> 00:09:52.500
then that's totally fine because that means

206
00:09:52.500 --> 00:09:55.930
that Nodemailer has updated its typings,

207
00:09:57.258 --> 00:09:59.560
in the place where we've installed them.

208
00:09:59.560 --> 00:10:02.170
So, once we send the mail,

209
00:10:02.170 --> 00:10:04.470
we have this info variable here.

210
00:10:04.470 --> 00:10:08.163
And we can just go ahead and log the info.

211
00:10:09.130 --> 00:10:13.483
And then I believe we can go back to Keystone.

212
00:10:14.560 --> 00:10:16.190
And we've gotta export this thing.

213
00:10:16.190 --> 00:10:20.913
So, just export it, export in front of it.

214
00:10:23.020 --> 00:10:24.483
What does it mad at now?

215
00:10:25.540 --> 00:10:27.970
Missing return type on function.

216
00:10:27.970 --> 00:10:29.420
Oh.
(laughing)

217
00:10:29.420 --> 00:10:30.850
That's the thing about TypeScript.

218
00:10:30.850 --> 00:10:32.240
It always yells at you.

219
00:10:32.240 --> 00:10:34.150
This will return not void.

220
00:10:34.150 --> 00:10:35.180
It's yelling at us for that.

221
00:10:35.180 --> 00:10:36.873
We want a promise.

222
00:10:39.530 --> 00:10:42.423
Is eventually returns a void.

223
00:10:43.730 --> 00:10:44.563
There we go.

224
00:10:44.563 --> 00:10:46.600
Okay. So if you're new to TypeScript,

225
00:10:46.600 --> 00:10:49.090
what we just did there is we said,

226
00:10:49.090 --> 00:10:52.960
expect a string coming in, expect a string coming in.

227
00:10:52.960 --> 00:10:56.260
Expect this function to return a promise,

228
00:10:56.260 --> 00:10:59.430
which will eventually return nothing, a void.

229
00:10:59.430 --> 00:11:00.710
That's what a void is.

230
00:11:00.710 --> 00:11:02.810
And then the other thing we did here

231
00:11:02.810 --> 00:11:06.580
is we created a custom type, or interface here,

232
00:11:06.580 --> 00:11:11.050
that, because send mail returns any,

233
00:11:11.050 --> 00:11:14.560
we just made our own custom response, called MailResponse

234
00:11:14.560 --> 00:11:16.390
and that made it happy.

235
00:11:16.390 --> 00:11:19.300
So now if we go to our Keystone.args here,

236
00:11:19.300 --> 00:11:22.300
we were console logging the args.

237
00:11:22.300 --> 00:11:23.770
What did those args look like?

238
00:11:23.770 --> 00:11:24.860
Is there still one in here?

239
00:11:24.860 --> 00:11:26.170
There we go.

240
00:11:26.170 --> 00:11:27.590
Looks like that.

241
00:11:27.590 --> 00:11:29.381
So we can go in here.

242
00:11:29.381 --> 00:11:32.180
We'll say, send the email.

243
00:11:32.180 --> 00:11:33.450
So we'll say, await send, what was it called?

244
00:11:36.790 --> 00:11:38.880
PasswordResetEmail.

245
00:11:38.880 --> 00:11:42.203
And that needs to be auto-imported.

246
00:11:44.010 --> 00:11:45.370
There we go.

247
00:11:45.370 --> 00:11:47.290
And you see how it's like red still,

248
00:11:47.290 --> 00:11:49.840
it's because it expected to arguments,

249
00:11:49.840 --> 00:11:51.040
but got zero, right?

250
00:11:51.040 --> 00:11:55.073
We have to pass it, the first argument which is,

251
00:11:55.073 --> 00:11:57.760
or we can even see it here just by bringing that up.

252
00:11:57.760 --> 00:12:01.550
The reset token, so that is args.token.

253
00:12:01.550 --> 00:12:05.440
And then the second argument is who is it gonna be sent to.

254
00:12:05.440 --> 00:12:06.570
The to string.

255
00:12:06.570 --> 00:12:08.680
Well, that is args.identity

256
00:12:15.420 --> 00:12:16.770
Let's go ahead and try it.

257
00:12:16.770 --> 00:12:18.250
First, just kill your process

258
00:12:18.250 --> 00:12:20.563
and restart the backend process.

259
00:12:21.410 --> 00:12:22.410
And once that starts

260
00:12:22.410 --> 00:12:26.750
we should be able to reset our password.

261
00:12:26.750 --> 00:12:31.000
And that should then send an email.

262
00:12:31.000 --> 00:12:32.430
So I'm just gonna triple check.

263
00:12:32.430 --> 00:12:34.460
If you wanna double check your backend is up and running,

264
00:12:34.460 --> 00:12:36.660
just refresh your localhost 3000.

265
00:12:36.660 --> 00:12:38.520
In there, all that it's up and running.

266
00:12:38.520 --> 00:12:40.453
Go ahead and request a reset.

267
00:12:43.580 --> 00:12:44.890
Oh, one thing we didn't do there is

268
00:12:44.890 --> 00:12:46.490
we didn't put a loading state on that.

269
00:12:46.490 --> 00:12:47.580
So, once I clicked it,

270
00:12:47.580 --> 00:12:51.100
I didn't know what was happening.

271
00:12:51.100 --> 00:12:52.620
So we'll go back and put a loading state

272
00:12:52.620 --> 00:12:53.800
on that in just a second,

273
00:12:53.800 --> 00:12:56.320
but it looks like it worked.

274
00:12:56.320 --> 00:12:59.780
Looks like we got, this is our response right here.

275
00:12:59.780 --> 00:13:02.380
And if we go to our email inbox,

276
00:13:02.380 --> 00:13:03.580
so open up mailbox.

277
00:13:03.580 --> 00:13:05.510
If you need to sign in to your email inbox

278
00:13:05.510 --> 00:13:08.560
you just use the same username password and your dot env.

279
00:13:08.560 --> 00:13:09.640
There it is.

280
00:13:09.640 --> 00:13:11.360
There's our password reset token.

281
00:13:11.360 --> 00:13:12.500
And this is hello there.

282
00:13:12.500 --> 00:13:14.040
Your password reset token is here.

283
00:13:14.040 --> 00:13:15.440
Click here to reset.

284
00:13:15.440 --> 00:13:16.273
Let's click it.

285
00:13:18.459 --> 00:13:19.320
There we go.

286
00:13:19.320 --> 00:13:22.763
Then I'm gonna go ahead and try to reset the whole thing.

287
00:13:24.640 --> 00:13:26.443
I'm gonna reset my password.

288
00:13:29.370 --> 00:13:30.400
Boom! Success.

289
00:13:30.400 --> 00:13:31.233
You can now sign in.

290
00:13:31.233 --> 00:13:34.590
So that is the end-to-end password reset flow is done.

291
00:13:34.590 --> 00:13:35.910
A couple little housekeeping items

292
00:13:35.910 --> 00:13:37.150
before we're finished is,

293
00:13:37.150 --> 00:13:41.500
first, this is the info that we get back

294
00:13:41.500 --> 00:13:43.543
from an accepted,

295
00:13:46.820 --> 00:13:49.330
first, this is the response that we get back.

296
00:13:49.330 --> 00:13:54.043
So remember we made that interface in our mail.ts.

297
00:13:55.630 --> 00:13:57.633
We can go and update that.

298
00:13:57.633 --> 00:13:58.530
Here we go.

299
00:13:58.530 --> 00:14:02.930
This right here, you can just paste that in there.

300
00:14:02.930 --> 00:14:04.820
And actually here's a little

301
00:14:06.170 --> 00:14:11.140
thing I like to do is json to typescript type.

302
00:14:12.110 --> 00:14:14.234
There is a really, here we go.

303
00:14:14.234 --> 00:14:15.270
MakeTypes.

304
00:14:15.270 --> 00:14:19.650
J-V-I-L-K.com forward slash, MakeTypes.

305
00:14:19.650 --> 00:14:23.250
You give it json and it will spit out the type for you.

306
00:14:23.250 --> 00:14:24.840
So we can,

307
00:14:24.840 --> 00:14:27.380
and if you don't know what types are, don't worry.

308
00:14:27.380 --> 00:14:29.440
I've got a TypeScript course coming up.

309
00:14:29.440 --> 00:14:30.740
But you can just play along here.

310
00:14:30.740 --> 00:14:33.267
We just have add to JSON.stringify,

311
00:14:33.267 --> 00:14:34.763
and what we have there.

312
00:14:35.740 --> 00:14:38.140
And then you can actually just run,

313
00:14:38.140 --> 00:14:38.973
oops.

314
00:14:39.890 --> 00:14:43.023
Copy around that hole.

315
00:14:44.320 --> 00:14:46.500
And then if you paste that in here,

316
00:14:46.500 --> 00:14:49.301
and we'll name this, what is our type here?

317
00:14:49.301 --> 00:14:50.384
MailResponse.

318
00:14:52.310 --> 00:14:54.470
And then click on generate.

319
00:14:54.470 --> 00:14:55.453
You'll see,

320
00:14:56.300 --> 00:14:57.780
it will give us

321
00:14:57.780 --> 00:15:01.610
the interfaces.

322
00:15:01.610 --> 00:15:03.300
We can paste in right here.

323
00:15:03.300 --> 00:15:04.133
Oops.

324
00:15:07.250 --> 00:15:08.100
That's kind of interesting.

325
00:15:08.100 --> 00:15:11.440
It did a subtype of envelope.

326
00:15:11.440 --> 00:15:13.460
And that makes sense because

327
00:15:13.460 --> 00:15:17.830
the envelope has a 'to' and a 'from' property.

328
00:15:17.830 --> 00:15:18.979
So that's nice.

329
00:15:18.979 --> 00:15:23.470
And that will then give us IntelliSense typing and whatnot.

330
00:15:23.470 --> 00:15:25.030
That's the proper type for that.

331
00:15:25.030 --> 00:15:27.030
Okay. So that's the first thing.

332
00:15:27.030 --> 00:15:28.380
The next thing that we need,

333
00:15:28.380 --> 00:15:31.380
I wanna do here, is just a little helper function

334
00:15:31.380 --> 00:15:34.250
that will give us a URL to the mail that was sent.

335
00:15:34.250 --> 00:15:37.400
So, if we go here, we say console.log info.

336
00:15:37.400 --> 00:15:38.790
What we can say is, if,

337
00:15:38.790 --> 00:15:40.000
delete that,

338
00:15:40.000 --> 00:15:43.370
process.env.MAIL_USER.includes ethereal,

339
00:15:46.690 --> 00:15:49.800
E-T-H-E-R-E-A-L dot email.

340
00:15:49.800 --> 00:15:53.240
So if we are using Ethereal email,

341
00:15:53.240 --> 00:15:55.040
we can use this little helper function

342
00:15:55.040 --> 00:15:57.940
in Nodemailer to actually give us the URL

343
00:15:57.940 --> 00:16:00.600
directly to the thing that was sent.

344
00:16:00.600 --> 00:16:03.913
And in here we can just say console.log.

345
00:16:05.030 --> 00:16:07.233
I like to use a mail emoji.

346
00:16:09.450 --> 00:16:12.680
Message Sent.

347
00:16:12.680 --> 00:16:14.363
Preview it at,

348
00:16:15.340 --> 00:16:17.807
and then there is a method in Nodemailer called

349
00:16:17.807 --> 00:16:19.307
getTestMessageUrl,

350
00:16:21.200 --> 00:16:23.830
and you pass it that info variable.

351
00:16:23.830 --> 00:16:26.510
Now try to import that sucker.

352
00:16:26.510 --> 00:16:27.343
There we go.

353
00:16:29.120 --> 00:16:31.403
And what's it yelling at me?

354
00:16:33.470 --> 00:16:34.470
That should be fine.

355
00:16:36.100 --> 00:16:37.250
Now watch this.

356
00:16:37.250 --> 00:16:39.503
Watch if we kill it and restart it.

357
00:16:40.770 --> 00:16:44.593
And try to request a password reset again.

358
00:16:51.210 --> 00:16:52.510
Oops. Network error.

359
00:16:52.510 --> 00:16:53.960
That's 'cause it hasn't started yet.

360
00:16:53.960 --> 00:16:54.910
Let's try it again.

361
00:17:00.320 --> 00:17:01.500
Success. There we go.

362
00:17:01.500 --> 00:17:02.333
See, look at this.

363
00:17:02.333 --> 00:17:03.820
Now Message Sent! Preview it at,

364
00:17:03.820 --> 00:17:06.730
and it gives you this nice long URL to Ethereal email.

365
00:17:06.730 --> 00:17:09.190
You can just click it and then you're able to see.

366
00:17:09.190 --> 00:17:13.140
So there's no trying to like line up,

367
00:17:13.140 --> 00:17:14.400
the email that was just sent

368
00:17:14.400 --> 00:17:15.950
and checking timestamps and whatnot.

369
00:17:15.950 --> 00:17:17.680
It'll just give you a link directly to it

370
00:17:17.680 --> 00:17:19.990
which is really slick.

371
00:17:19.990 --> 00:17:23.110
It looks like it's just taking like the sent ID

372
00:17:23.110 --> 00:17:25.840
from the email and you can display it right in here.

373
00:17:25.840 --> 00:17:30.430
So, that is the entire password reset flow.

374
00:17:30.430 --> 00:17:31.420
Hopefully you enjoyed that.

375
00:17:31.420 --> 00:17:33.167
And I'll catch you in the next one.

