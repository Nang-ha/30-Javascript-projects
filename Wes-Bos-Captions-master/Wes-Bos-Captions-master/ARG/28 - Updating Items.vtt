WEBVTT

1
00:00:00.000 --> 00:00:02.032
(air whooshing)

2
00:00:02.032 --> 00:00:04.120
<v ->All right, let's get into actually updating,</v>

3
00:00:04.120 --> 00:00:05.720
or editing each of our products,

4
00:00:05.720 --> 00:00:10.720
so if we take a look at our back end here,

5
00:00:11.149 --> 00:00:12.300
and you can go to our playground,

6
00:00:12.300 --> 00:00:16.480
you'll see that there is a mutation called updateProduct,

7
00:00:17.325 --> 00:00:19.020
there's an update for everything,

8
00:00:19.020 --> 00:00:20.340
so it's updateProduct,

9
00:00:20.340 --> 00:00:21.173
and you can pass it,

10
00:00:21.173 --> 00:00:22.100
you have to pass it two things,

11
00:00:22.100 --> 00:00:24.260
the ID of the product you wish to update,

12
00:00:24.260 --> 00:00:26.080
as well as the data which you wish

13
00:00:26.080 --> 00:00:28.290
to update on that product,

14
00:00:28.290 --> 00:00:29.800
so, what we'll do here is,

15
00:00:29.800 --> 00:00:32.070
I'm gonna show you a little bit differently how to do it,

16
00:00:32.070 --> 00:00:34.160
because if we go to our site here,

17
00:00:34.160 --> 00:00:35.970
and I click on one of our products,

18
00:00:35.970 --> 00:00:40.000
here, we're using the URL where the ID is part of the URL,

19
00:00:40.000 --> 00:00:43.620
I'm gonna show you also now how to pass data

20
00:00:43.620 --> 00:00:45.060
in via query parameter,

21
00:00:45.060 --> 00:00:46.260
because sometimes you don't

22
00:00:46.260 --> 00:00:47.880
want that data to be part of the URL,

23
00:00:47.880 --> 00:00:50.010
you just want it to be passed via query param,

24
00:00:50.010 --> 00:00:52.032
which is the question mark,

25
00:00:52.032 --> 00:00:54.840
ID, equals part of the URL,

26
00:00:54.840 --> 00:00:57.910
so let's go to our pages directory here,

27
00:00:57.910 --> 00:00:59.110
and make a new file,

28
00:00:59.110 --> 00:01:00.863
and call it update dot JS,

29
00:01:02.240 --> 00:01:04.770
and I'm just gonna go into cell dot JS,

30
00:01:04.770 --> 00:01:09.100
copy, and paste everything we have in there,

31
00:01:09.100 --> 00:01:12.370
and we'll change this cell page, to UpdatePage,

32
00:01:15.335 --> 00:01:20.335
and then we will make an UpdateProduct component,

33
00:01:22.910 --> 00:01:25.460
we'll go into our components folder here,

34
00:01:25.460 --> 00:01:27.210
make a new file,

35
00:01:27.210 --> 00:01:28.570
capital U, update,

36
00:01:28.570 --> 00:01:31.243
capital P, product dot JS,

37
00:01:32.160 --> 00:01:37.013
and then we'll just export default function, UpdateProduct,

38
00:01:39.800 --> 00:01:44.123
and we'll return P, update, okay.

39
00:01:45.620 --> 00:01:47.860
All right, next, we need to,

40
00:01:47.860 --> 00:01:50.740
let's go into our components directory,

41
00:01:50.740 --> 00:01:54.500
and grab product dot JS,

42
00:01:54.500 --> 00:01:57.040
and right below the paragraph,

43
00:01:57.040 --> 00:01:58.817
we may have had a comment in there that says,

44
00:01:58.817 --> 00:02:00.640
"To do, add the buttons."

45
00:02:00.640 --> 00:02:03.240
We'll give ourselves a class of buttonList,

46
00:02:03.240 --> 00:02:05.410
so a div with the class of buttonList,

47
00:02:05.410 --> 00:02:07.713
and in there a link tag,

48
00:02:08.580 --> 00:02:11.060
and we'll href is equal to,

49
00:02:11.060 --> 00:02:12.910
and this is where it's gonna be a little bit different,

50
00:02:12.910 --> 00:02:13.800
previously, what we did,

51
00:02:13.800 --> 00:02:15.300
was that we did forward slash update,

52
00:02:15.300 --> 00:02:16.730
forward slash, like,

53
00:02:16.730 --> 00:02:18.750
ABC, one, two, three, of the ID,

54
00:02:18.750 --> 00:02:19.583
in our case, now,

55
00:02:19.583 --> 00:02:21.310
we're going to go to a single page,

56
00:02:21.310 --> 00:02:22.240
which is called update,

57
00:02:22.240 --> 00:02:25.470
and we'll pass the data that we need, which is the ID,

58
00:02:25.470 --> 00:02:26.920
along in the query,

59
00:02:26.920 --> 00:02:31.920
so we're going to say the path name is update,

60
00:02:33.180 --> 00:02:38.180
and the query that needs to be passed via the URL,

61
00:02:38.368 --> 00:02:43.368
is ID is equal to the product dot ID,

62
00:02:44.350 --> 00:02:45.183
then inside of here,

63
00:02:45.183 --> 00:02:47.710
we'll just do a little edit,

64
00:02:47.710 --> 00:02:51.710
and then put a little pencil icon,

65
00:02:51.710 --> 00:02:55.353
the lazy person's icon set.

66
00:02:56.370 --> 00:02:58.260
Okay, so if we go to our homepage now,

67
00:02:58.260 --> 00:02:59.600
you see there's an edit button,

68
00:02:59.600 --> 00:03:01.090
you click on that,

69
00:03:01.090 --> 00:03:03.022
and you see how the ID is now being passed

70
00:03:03.022 --> 00:03:04.770
in via a query param,

71
00:03:04.770 --> 00:03:06.560
which is question mark, ID,

72
00:03:06.560 --> 00:03:10.051
that's just another way to do your URLs in Ext JS,

73
00:03:10.051 --> 00:03:12.790
and the way that we can access the ID,

74
00:03:12.790 --> 00:03:16.580
is via the query on the page,

75
00:03:16.580 --> 00:03:17.913
it's exactly the same way.

76
00:03:18.790 --> 00:03:23.790
Okay, so, let's go into our UpdateProduct,

77
00:03:26.070 --> 00:03:28.230
and let's just talk about what we need here,

78
00:03:28.230 --> 00:03:33.230
so one, we need to get the existing product,

79
00:03:33.900 --> 00:03:38.900
two, we need to get the mutation to update the product,

80
00:03:41.020 --> 00:03:46.020
and three, we need the form to handle the updates,

81
00:03:49.810 --> 00:03:51.242
and that's gonna be very similar

82
00:03:51.242 --> 00:03:55.113
to what we did in the create product component,

83
00:03:56.250 --> 00:03:58.877
I always run into this problem where I'm like,

84
00:03:58.877 --> 00:04:01.247
"Hmm, so I have a create form,

85
00:04:01.247 --> 00:04:02.757
"and I have an update form,

86
00:04:02.757 --> 00:04:04.677
"do I make that the same form,

87
00:04:04.677 --> 00:04:07.877
"and deal with the differences via if statements,

88
00:04:07.877 --> 00:04:09.967
"and whatnot inside of the form,

89
00:04:09.967 --> 00:04:11.457
"or do I just create two separate forms,

90
00:04:11.457 --> 00:04:14.360
"and update them individually as I need to?"

91
00:04:14.360 --> 00:04:15.580
And for this case,

92
00:04:15.580 --> 00:04:17.320
and also in a lot of my own cases,

93
00:04:17.320 --> 00:04:19.053
I just side on the,

94
00:04:19.950 --> 00:04:21.600
just being, creating two separate forms,

95
00:04:21.600 --> 00:04:25.010
so you're not dealing with complexity and little edge cases,

96
00:04:25.010 --> 00:04:26.300
so, let's first,

97
00:04:26.300 --> 00:04:27.990
we need to get the existing product,

98
00:04:27.990 --> 00:04:29.360
okay, so to get a product,

99
00:04:29.360 --> 00:04:31.040
you need something about it,

100
00:04:31.040 --> 00:04:32.906
in our case, it's the ID,

101
00:04:32.906 --> 00:04:34.682
so if we go to our update,

102
00:04:34.682 --> 00:04:36.200
how do we get the ID?

103
00:04:36.200 --> 00:04:37.666
Well, we have to go to our update page

104
00:04:37.666 --> 00:04:41.170
in order to get information from the URL,

105
00:04:41.170 --> 00:04:44.570
and that data is passed in via props dot query,

106
00:04:44.570 --> 00:04:46.970
so we're gonna destructure props dot query

107
00:04:46.970 --> 00:04:48.417
into a variable called query,

108
00:04:48.417 --> 00:04:50.543
and if we log out query,

109
00:04:54.570 --> 00:04:58.100
you see we get all kinds of stuff in here,

110
00:04:58.100 --> 00:04:59.770
there we go, object,

111
00:04:59.770 --> 00:05:01.420
there we go, ID,

112
00:05:01.420 --> 00:05:02.253
that's being passed in,

113
00:05:02.253 --> 00:05:03.979
and if I pass in other stuff like

114
00:05:03.979 --> 00:05:07.370
and cool, is equal to true,

115
00:05:07.370 --> 00:05:10.150
that would then also be passed along via that,

116
00:05:10.150 --> 00:05:11.120
so what we'll do here,

117
00:05:11.120 --> 00:05:13.570
is we'll say the ID of the product

118
00:05:13.570 --> 00:05:16.537
that we need to do to update is called query dot ID,

119
00:05:17.959 --> 00:05:20.550
then we can go into our UpdateProduct component,

120
00:05:20.550 --> 00:05:22.103
and destructure that ID,

121
00:05:23.830 --> 00:05:28.150
and then let's just interpolate the ID into here,

122
00:05:28.150 --> 00:05:31.260
so we can just make sure it's being passed properly,

123
00:05:31.260 --> 00:05:32.093
here we go,

124
00:05:32.093 --> 00:05:34.110
and if you go to any other page,

125
00:05:34.110 --> 00:05:36.780
and edit any of these, there we go,

126
00:05:36.780 --> 00:05:38.433
the ID is being piped in, good.

127
00:05:40.410 --> 00:05:43.990
So next up, we need to get the existing product,

128
00:05:43.990 --> 00:05:48.360
so we will make a query for that,

129
00:05:48.360 --> 00:05:49.920
so let's just go above here,

130
00:05:49.920 --> 00:05:54.920
say, const, single product query is equal to GQL,

131
00:05:57.010 --> 00:05:58.580
and we make a query,

132
00:05:58.580 --> 00:06:02.860
we'll call that single product query that takes in an ID,

133
00:06:02.860 --> 00:06:03.990
with the type of ID,

134
00:06:03.990 --> 00:06:05.570
and is required, right?

135
00:06:05.570 --> 00:06:07.950
Because whenever we use this query,

136
00:06:07.950 --> 00:06:09.623
we need to pass in an ID,

137
00:06:10.560 --> 00:06:11.709
and then from that,

138
00:06:11.709 --> 00:06:14.200
we will use our GraphQL,

139
00:06:14.200 --> 00:06:15.820
to query a single product,

140
00:06:15.820 --> 00:06:18.380
so how do you query a single product in GraphQL?

141
00:06:18.380 --> 00:06:22.400
Query, and then it's just product,

142
00:06:22.400 --> 00:06:24.210
and it takes a where,

143
00:06:24.210 --> 00:06:25.880
and then I'm assuming it takes, yeah,

144
00:06:25.880 --> 00:06:28.835
where are the ID is equal to the ID that's passed in, right?

145
00:06:28.835 --> 00:06:30.730
So, we can go in here,

146
00:06:30.730 --> 00:06:32.460 line:15% 
and say, "Give me a product

147
00:06:33.487 --> 00:06:38.487 line:15% 
"where the ID is equal to the ID that's passed in."

148
00:06:39.560 --> 00:06:42.310
And from that, we need the ID of the product,

149
00:06:42.310 --> 00:06:43.143
we don't really need it,

150
00:06:43.143 --> 00:06:44.480
but might as well,

151
00:06:44.480 --> 00:06:47.883
name, description, and the price,

152
00:06:49.820 --> 00:06:51.810
okay, now we need to import a few things,

153
00:06:51.810 --> 00:06:54.933
GQL needs to be imported, okay,

154
00:06:56.730 --> 00:06:58.127
so we need to get the existing product,

155
00:06:58.127 --> 00:06:59.770
and let's go ahead and try to do that,

156
00:06:59.770 --> 00:07:02.098
so say const, curly bracket,

157
00:07:02.098 --> 00:07:05.322
data, error, loading,

158
00:07:05.322 --> 00:07:08.010
is equal to use query,

159
00:07:08.010 --> 00:07:11.530
and we'll pass it the single product query,

160
00:07:11.530 --> 00:07:12.977
and then what else do we need

161
00:07:12.977 --> 00:07:14.680
to pass the single product query?

162
00:07:14.680 --> 00:07:15.513
The ID, right?

163
00:07:15.513 --> 00:07:16.370
The ID of the item,

164
00:07:16.370 --> 00:07:19.873
so that goes in via variables,

165
00:07:22.310 --> 00:07:23.480
it's not auto completing,

166
00:07:23.480 --> 00:07:24.313
it makes me think,

167
00:07:24.313 --> 00:07:25.203
Oh, you know why?

168
00:07:26.060 --> 00:07:26.893
I love that,

169
00:07:26.893 --> 00:07:28.763
it's like, "Hmm, it wasn't auto-completing."

170
00:07:28.763 --> 00:07:30.610
It's 'cause we didn't import use query yet,

171
00:07:30.610 --> 00:07:32.630
and it doesn't know what arguments it takes,

172
00:07:32.630 --> 00:07:35.580
so let's go ahead and auto-import use query,

173
00:07:35.580 --> 00:07:37.230
boom, there it is,

174
00:07:37.230 --> 00:07:38.930
from apollo client,

175
00:07:38.930 --> 00:07:40.612
and then it should tell me that, here we go,

176
00:07:40.612 --> 00:07:44.550
variable's ID is equal to the ID,

177
00:07:44.550 --> 00:07:45.530
and when I give that a save,

178
00:07:45.530 --> 00:07:47.903
it short format to just ID, there we go,

179
00:07:51.490 --> 00:07:52.720
and then in here,

180
00:07:52.720 --> 00:07:56.603
just log out our data,

181
00:08:01.190 --> 00:08:03.980
and here we go,

182
00:08:03.980 --> 00:08:07.070
there's our product, the Fanorak,

183
00:08:07.070 --> 00:08:09.050
let's go to another page,

184
00:08:09.050 --> 00:08:11.083
go to the Airmax, edit that one,

185
00:08:13.230 --> 00:08:14.400
and there we go,

186
00:08:14.400 --> 00:08:15.470
there's our Airmax, okay, good,

187
00:08:15.470 --> 00:08:19.110
so that's number one is get the initial product,

188
00:08:19.110 --> 00:08:21.930
second, we need a mutation to update the products.

189
00:08:21.930 --> 00:08:23.490
All right, go up here,

190
00:08:23.490 --> 00:08:24.429
and we'll say const,

191
00:08:24.429 --> 00:08:29.429
update product mutation is equal to GQL,

192
00:08:31.070 --> 00:08:31.970
then inside of there,

193
00:08:31.970 --> 00:08:35.540
we have a mutation called update product mutation,

194
00:08:35.540 --> 00:08:36.913
that takes in,

195
00:08:37.770 --> 00:08:39.200
well, let's go look at it, right?

196
00:08:39.200 --> 00:08:41.360
Remember what did we say we needed?

197
00:08:41.360 --> 00:08:46.360
Update product needs and ID and it also needs data, right?

198
00:08:46.500 --> 00:08:49.350
Okay, so in our case,

199
00:08:49.350 --> 00:08:52.693
we're going to update the product mutation,

200
00:08:54.580 --> 00:08:57.187
takes in an ID,

201
00:08:57.187 --> 00:08:59.280
which is a type of ID,

202
00:08:59.280 --> 00:09:00.480
and let's put these on it's own line,

203
00:09:00.480 --> 00:09:01.883
we got a lot coming in here.

204
00:09:06.110 --> 00:09:08.300
We need a name, which is a string,

205
00:09:08.300 --> 00:09:12.180
we need a description, which is a string,

206
00:09:12.180 --> 00:09:16.130
and we need a price, which is an integer,

207
00:09:16.130 --> 00:09:20.470
and then that will, in turn,

208
00:09:20.470 --> 00:09:23.090
call our updateItem,

209
00:09:28.230 --> 00:09:29.620
now this is the GraphQL,

210
00:09:29.620 --> 00:09:31.410
so this is what we're calling, right here,

211
00:09:31.410 --> 00:09:32.623
not updateItem, updateProduct,

212
00:09:35.630 --> 00:09:38.460
and that takes in an ID,

213
00:09:38.460 --> 00:09:40.080
which is our ID variable,

214
00:09:40.080 --> 00:09:44.350
and the data object,

215
00:09:44.350 --> 00:09:46.380
we're just going to say name,

216
00:09:46.380 --> 00:09:47.580
here, let me show you a little trick,

217
00:09:47.580 --> 00:09:51.050
name, sometimes you type all this stuff in,

218
00:09:51.050 --> 00:09:52.297
you could put these in their own type,

219
00:09:52.297 --> 00:09:53.350
and just use that,

220
00:09:53.350 --> 00:09:55.550
but sometimes it's easier just to type it,

221
00:09:55.550 --> 00:09:57.083
there we go,

222
00:09:58.100 --> 00:09:59.770
bum, bum, bum,

223
00:09:59.770 --> 00:10:04.770
data is going to be the variable that came in, boom,

224
00:10:07.210 --> 00:10:08.820
okay, so that I'll just put it on it's own line,

225
00:10:08.820 --> 00:10:10.350
but ID that is ID variable name,

226
00:10:10.350 --> 00:10:11.970
name, description, description, price, price,

227
00:10:11.970 --> 00:10:14.900
okay, and then from that,

228
00:10:14.900 --> 00:10:16.560
we need to return,

229
00:10:16.560 --> 00:10:19.210
we don't really care too much about what we return,

230
00:10:19.210 --> 00:10:22.480
'cause we are just gonna refresh this initial query

231
00:10:22.480 --> 00:10:23.820
after it's all done,

232
00:10:23.820 --> 00:10:25.513
but we're gonna grab the name,

233
00:10:27.940 --> 00:10:30.790
oh, I can just paste in what I got here (laughs),

234
00:10:30.790 --> 00:10:33.311
name, description, and the price.

235
00:10:33.311 --> 00:10:37.380
All right, let's make sure nothing's broken,

236
00:10:37.380 --> 00:10:39.530
that was a lot of code that we wrote,

237
00:10:39.530 --> 00:10:40.523
okay, it's good,

238
00:10:41.960 --> 00:10:44.143
and so what we'll do right here,

239
00:10:45.150 --> 00:10:46.433
is we'll say const,

240
00:10:47.660 --> 00:10:49.570
square brackets, update,

241
00:10:49.570 --> 00:10:51.150
we'll call it update product,

242
00:10:51.150 --> 00:10:53.430
that's our setter function,

243
00:10:53.430 --> 00:10:55.300
and then we need to destructure,

244
00:10:55.300 --> 00:10:58.080
data, error, and loading,

245
00:10:58.080 --> 00:11:01.550
and that is going to be equal to use query,

246
00:11:01.550 --> 00:11:03.077
or no, useMutation,

247
00:11:04.751 --> 00:11:08.383
and it takes the update product mutation,

248
00:11:11.900 --> 00:11:15.850
and then the variables that be passed along to this,

249
00:11:15.850 --> 00:11:17.893
we've got to import useMutation,

250
00:11:20.504 --> 00:11:23.103
the variables are going to be,

251
00:11:24.290 --> 00:11:25.650
well, what variables does it need?

252
00:11:25.650 --> 00:11:28.570
It needs ID, name, description, and price,

253
00:11:28.570 --> 00:11:31.453
it's going to be the ID value,

254
00:11:33.490 --> 00:11:35.640
and then we're going to spread in all

255
00:11:35.640 --> 00:11:38.120
of the updates that has happened,

256
00:11:38.120 --> 00:11:38.953
and we don't have that yet,

257
00:11:38.953 --> 00:11:41.087
but we have a problem here, data,

258
00:11:41.087 --> 00:11:43.410
data has already been declared, right?

259
00:11:43.410 --> 00:11:45.238
Like, we already named data,

260
00:11:45.238 --> 00:11:46.887
error, and loading here,

261
00:11:46.887 --> 00:11:49.490
and now we get data, error,

262
00:11:49.490 --> 00:11:50.323
and loading here,

263
00:11:50.323 --> 00:11:53.120
so what do you do where you use two queries,

264
00:11:53.120 --> 00:11:54.743
or two mutations, or one of each,

265
00:11:54.743 --> 00:11:56.580
inside of a single function?

266
00:11:56.580 --> 00:12:01.166
Well, because we are destructuring the result from this,

267
00:12:01.166 --> 00:12:06.166
we could either just like dump it into one variable,

268
00:12:08.570 --> 00:12:11.600
we could just call this like mutationResponse,

269
00:12:11.600 --> 00:12:13.440
and then where we needed to access it,

270
00:12:13.440 --> 00:12:15.439
we would just say mutationResponse dot data,

271
00:12:15.439 --> 00:12:19.313
dot loading, and dot error,

272
00:12:20.220 --> 00:12:24.910
or you could rename them as you destructure them,

273
00:12:24.910 --> 00:12:27.363
so data, colon, updateData,

274
00:12:28.776 --> 00:12:30.827
error, updateError,

275
00:12:31.950 --> 00:12:35.330
and loading, is updateLoading,

276
00:12:38.740 --> 00:12:40.410
and that is renaming,

277
00:12:40.410 --> 00:12:41.960
so you do you destructure the data property

278
00:12:41.960 --> 00:12:44.250
into a new variable called updateData,

279
00:12:44.250 --> 00:12:47.040
and that way those variables are not overlapping each other,

280
00:12:47.040 --> 00:12:48.640
and accidentally overwriting 'em,

281
00:12:48.640 --> 00:12:50.030
it's not even valid JavaScript

282
00:12:50.030 --> 00:12:52.260
if you're using anything modern,

283
00:12:52.260 --> 00:12:53.963
so that's kind of important.

284
00:12:54.952 --> 00:12:56.010
All right, whew,

285
00:12:56.010 --> 00:12:58.560
that is some funky, funky JavaScript,

286
00:12:58.560 --> 00:12:59.593
we just wrote there,

287
00:13:01.410 --> 00:13:04.396
but we have an updater,

288
00:13:04.396 --> 00:13:06.237
we have our variables,

289
00:13:06.237 --> 00:13:08.660
we're using our mutation, and we pass it,

290
00:13:08.660 --> 00:13:09.493
and then we have to say,

291
00:13:09.493 --> 00:13:13.657
"To do, pass in updates to product here."

292
00:13:15.800 --> 00:13:18.380
All right, so that's that,

293
00:13:18.380 --> 00:13:19.500
next, the third thing,

294
00:13:19.500 --> 00:13:21.930
we need a form to handle the updates,

295
00:13:21.930 --> 00:13:24.510
and right here, we're gonna do a little bit

296
00:13:24.510 --> 00:13:27.030
of copy pasting from our create form,

297
00:13:27.030 --> 00:13:28.958
'cause it is going to be very similar,

298
00:13:28.958 --> 00:13:31.022
so if we take a look at our create product,

299
00:13:31.022 --> 00:13:35.520
and you see we have our form tag here,

300
00:13:35.520 --> 00:13:38.223
just copy the entire return,

301
00:13:38.223 --> 00:13:40.513
and the all of the form here,

302
00:13:44.660 --> 00:13:47.280
and let's just paste that in there,

303
00:13:47.280 --> 00:13:48.280
now this is not gonna work,

304
00:13:48.280 --> 00:13:49.580
'cause there's a bunch of errors,

305
00:13:49.580 --> 00:13:50.830
but let's go through it together,

306
00:13:50.830 --> 00:13:52.760
so, return form,

307
00:13:52.760 --> 00:13:56.963
we need to import the form styles, on submit,

308
00:13:58.490 --> 00:14:01.930
let's just comment out everything,

309
00:14:01.930 --> 00:14:05.257
and say, "To do, handle submit."

310
00:14:10.640 --> 00:14:12.420
Okay, next line, DisplayError,

311
00:14:12.420 --> 00:14:16.285
we need to import that, good,

312
00:14:16.285 --> 00:14:21.285
loading, this loading state will be not

313
00:14:21.933 --> 00:14:23.317
for the querying of it,

314
00:14:27.220 --> 00:14:28.420
it's for the updating,

315
00:14:28.420 --> 00:14:31.910
so we will change that to updateLoading,

316
00:14:34.740 --> 00:14:35.877
and then I guess, also,

317
00:14:35.877 --> 00:14:40.877
the error needs to be that error, or updateError,

318
00:14:41.770 --> 00:14:45.460
so we could pass both, or either,

319
00:14:45.460 --> 00:14:47.340
if it queries has an error,

320
00:14:47.340 --> 00:14:48.650
it will show that,

321
00:14:48.650 --> 00:14:50.760
otherwise it will,

322
00:14:50.760 --> 00:14:54.800
if there is a update error, it'll pass that,

323
00:14:54.800 --> 00:14:57.010
the image, we're not doing the image here,

324
00:14:57.010 --> 00:15:00.850
so we can get rid of that, name,

325
00:15:00.850 --> 00:15:01.990
inputs name, handle change,

326
00:15:01.990 --> 00:15:04.510
we have to do that form thing in just a sec,

327
00:15:04.510 --> 00:15:05.920
the price is there,

328
00:15:05.920 --> 00:15:07.440
the description is there,

329
00:15:07.440 --> 00:15:09.523
and then the submit should be,

330
00:15:10.470 --> 00:15:15.470
we'll just name that update product, okay?

331
00:15:15.800 --> 00:15:18.437
Now, we need to deal with the form state, right?

332
00:15:18.437 --> 00:15:20.170
'Cause we don't have form state yet,

333
00:15:20.170 --> 00:15:22.430
so if we hop back to create product,

334
00:15:22.430 --> 00:15:25.970
remember we did this right here,

335
00:15:25.970 --> 00:15:29.313
copy this entire use form hook that we did,

336
00:15:30.722 --> 00:15:32.423
and we'll go into our update product,

337
00:15:32.423 --> 00:15:35.680
and we'll just go right here above it, what is that?

338
00:15:35.680 --> 00:15:40.680
"2.5 is going to be create some state for the form inputs."

339
00:15:46.150 --> 00:15:47.840
Paste that, so,

340
00:15:47.840 --> 00:15:48.910
inputs, handle change,

341
00:15:48.910 --> 00:15:50.010
clear form, reset form,

342
00:15:50.010 --> 00:15:51.090
is equal to use form,

343
00:15:51.090 --> 00:15:52.173
got to import that,

344
00:15:53.170 --> 00:15:55.300
and now the image, the name,

345
00:15:55.300 --> 00:15:57.730
the price, and the description,

346
00:15:57.730 --> 00:16:00.420
those things can just be pulled off

347
00:16:00.420 --> 00:16:02.810
of where did we get it?

348
00:16:02.810 --> 00:16:04.660
Right here, data,

349
00:16:04.660 --> 00:16:09.660
so you could either just pass the entire object like that,

350
00:16:12.520 --> 00:16:15.940
or you could say, name is data dot name,

351
00:16:15.940 --> 00:16:17.840
let's just try, hmm,

352
00:16:21.230 --> 00:16:23.020
I'm gonna mainly pass it,

353
00:16:23.020 --> 00:16:27.393
because we don't need the ID input,

354
00:16:28.310 --> 00:16:29.250
so, actually,

355
00:16:29.250 --> 00:16:30.890
no, let's try it, let's try it,

356
00:16:30.890 --> 00:16:31.943
let's just try data.

357
00:16:34.710 --> 00:16:36.973
Okay, so,

358
00:16:40.300 --> 00:16:45.300
now these inputs should be populating the name,

359
00:16:45.357 --> 00:16:46.580
and the price, and description,

360
00:16:46.580 --> 00:16:47.413
but they're not,

361
00:16:47.413 --> 00:16:48.593
so let's debug that,

362
00:16:49.520 --> 00:16:54.377
we can just log out our inputs, there we go,

363
00:16:55.370 --> 00:16:57.390
product, oh I see,

364
00:16:57.390 --> 00:17:01.413
I see, it's data dot product.

365
00:17:08.807 --> 00:17:10.840
"Cannot read property product of undefined."

366
00:17:10.840 --> 00:17:12.410
Ah, you know why?

367
00:17:12.410 --> 00:17:16.270
Because there is a possibility that we're in loading state,

368
00:17:16.270 --> 00:17:17.447
so, we'll just say,

369
00:17:17.447 --> 00:17:22.447
"If loading, return paragraph loading dot, dot, dot."

370
00:17:25.172 --> 00:17:26.100
There we go,

371
00:17:26.100 --> 00:17:28.913
all right, so that worked well,

372
00:17:30.220 --> 00:17:32.200
we have queried the single product,

373
00:17:32.200 --> 00:17:35.083
we're passing it into our use form hook,

374
00:17:37.650 --> 00:17:39.877
it's giving us some grief here,

375
00:17:39.877 --> 00:17:42.047
"Use form hook is called conditionally,

376
00:17:42.047 --> 00:17:44.007
"react hooks must be called

377
00:17:44.007 --> 00:17:46.840
"in the exact same order of every render."

378
00:17:46.840 --> 00:17:49.790
Okay, we're not allowed do this,

379
00:17:49.790 --> 00:17:51.830
I should've remembered that,

380
00:17:51.830 --> 00:17:55.413
so we will bring that loading down here,

381
00:17:57.730 --> 00:17:59.390
and then what we need to do,

382
00:17:59.390 --> 00:18:03.470
is pass it, data question mark dot product,

383
00:18:03.470 --> 00:18:05.080
so if there is data,

384
00:18:05.080 --> 00:18:06.243
then pass the product.

385
00:18:07.100 --> 00:18:08.930
One more thing we need to do,

386
00:18:08.930 --> 00:18:11.147
is just go to the homepage,

387
00:18:11.147 --> 00:18:13.995
and try to edit another one,

388
00:18:13.995 --> 00:18:15.400
and you'll see it's empty,

389
00:18:15.400 --> 00:18:17.630
I'm gonna cover why that happens in just a second,

390
00:18:17.630 --> 00:18:21.760
it has to do with the fact that our initial state

391
00:18:21.760 --> 00:18:25.820
is initially empty until the loading can come in,

392
00:18:25.820 --> 00:18:27.390
and that's a bit of a weird thing,

393
00:18:27.390 --> 00:18:28.710
so, I think we have to use,

394
00:18:28.710 --> 00:18:30.630
like, use effect to fix that,

395
00:18:30.630 --> 00:18:31.463
but that's fine,

396
00:18:31.463 --> 00:18:33.430
let's just go to one,

397
00:18:33.430 --> 00:18:35.720
and then just manually refresh the page,

398
00:18:35.720 --> 00:18:37.920
and make sure that they fill out,

399
00:18:37.920 --> 00:18:40.468
and then we'll go back and figure that out

400
00:18:40.468 --> 00:18:41.780
on how to do that.

401
00:18:41.780 --> 00:18:43.370
Okay, so can I type in here?

402
00:18:43.370 --> 00:18:44.403
Yes I can,

403
00:18:46.670 --> 00:18:49.950
when that happens, when the submit happens,

404
00:18:49.950 --> 00:18:52.820
we need to prevent default, yes,

405
00:18:52.820 --> 00:18:57.820
and then we also need to run our updateProduct function,

406
00:18:59.090 --> 00:19:00.763
so, updateProduct,

407
00:19:03.050 --> 00:19:07.060
and here we can just say const, response,

408
00:19:07.060 --> 00:19:09.573
and console dot log the response,

409
00:19:12.270 --> 00:19:16.200
and then we also need to pass the inputs data

410
00:19:16.200 --> 00:19:20.940
to our updateProduct,

411
00:19:20.940 --> 00:19:23.680
and we could do that a number of different ways,

412
00:19:23.680 --> 00:19:26.820
we could either pass it right here, when we define it,

413
00:19:26.820 --> 00:19:29.563
or we can pass it on call,

414
00:19:31.400 --> 00:19:34.200
I've already shown you how to do it at definition,

415
00:19:34.200 --> 00:19:35.220
so maybe, actually,

416
00:19:35.220 --> 00:19:37.330
I'm gonna show you how to do it on call,

417
00:19:37.330 --> 00:19:40.070
just so that we know how to do it both ways,

418
00:19:40.070 --> 00:19:42.240
so let's take this variables,

419
00:19:42.240 --> 00:19:44.440
the whole second argument of useMutation,

420
00:19:44.440 --> 00:19:45.743
can be actually taken out,

421
00:19:47.670 --> 00:19:49.673
and then when we call it,

422
00:19:50.540 --> 00:19:52.570
we can pass the variables,

423
00:19:52.570 --> 00:19:54.880
and it needs an ID,

424
00:19:54.880 --> 00:19:56.927
which I believe, yeah,

425
00:19:56.927 --> 00:19:59.100
we're within scope of our component,

426
00:19:59.100 --> 00:20:00.993
so we can just pass that ID variable,

427
00:20:02.340 --> 00:20:06.041
and then the data is going to be inputs, right?

428
00:20:06.041 --> 00:20:07.653
It's this value right here.

429
00:20:09.200 --> 00:20:11.620
So, if we've did it all right,

430
00:20:11.620 --> 00:20:13.530
and I add an X to here,

431
00:20:13.530 --> 00:20:16.473
and clear out my console, click on update,

432
00:20:17.996 --> 00:20:19.603
(grunts) all right, it broke.

433
00:20:23.150 --> 00:20:25.810
The error was, well,

434
00:20:25.810 --> 00:20:29.550
we can catch it, so response,

435
00:20:29.550 --> 00:20:31.970
oh, we got to await this,

436
00:20:31.970 --> 00:20:34.716
and we can tack a dot catch,

437
00:20:34.716 --> 00:20:38.180
console dot log, or console dot error onto the end,

438
00:20:38.180 --> 00:20:41.300
and that should give us a bit more information,

439
00:20:41.300 --> 00:20:43.600
so put an X on the end,

440
00:20:43.600 --> 00:20:45.453
clear that out, update,

441
00:20:47.437 --> 00:20:50.147
"Field ID is not defined by the type

442
00:20:50.147 --> 00:20:51.780
"of product update input."

443
00:20:51.780 --> 00:20:56.000
Ah, okay, I see,

444
00:20:56.000 --> 00:20:58.380
I see why that's happening,

445
00:20:58.380 --> 00:21:00.510
so what we're doing here,

446
00:21:00.510 --> 00:21:04.230
is we're taking the product data,

447
00:21:04.230 --> 00:21:05.963
and putting it into our inputs,

448
00:21:06.900 --> 00:21:08.360
but if you take a look at it,

449
00:21:08.360 --> 00:21:12.300
it has all of the fields that we want,

450
00:21:12.300 --> 00:21:16.140
but then it also has ID on it,

451
00:21:16.140 --> 00:21:19.560
and if you try to update the ID on a product,

452
00:21:19.560 --> 00:21:23.490
it says, "Hey, I wasn't expecting you to give me an ID."

453
00:21:23.490 --> 00:21:25.600
And then, if you're using REST,

454
00:21:25.600 --> 00:21:26.433
or something like that,

455
00:21:26.433 --> 00:21:27.610
it might just ignore it,

456
00:21:27.610 --> 00:21:29.950
but in our case, GraphQL is typed,

457
00:21:29.950 --> 00:21:31.180
and it gets really cranky

458
00:21:31.180 --> 00:21:33.070
when you pass it stuff it doesn't want,

459
00:21:33.070 --> 00:21:36.760
so, we could either just explicitly type it,

460
00:21:36.760 --> 00:21:38.330
or delete the ID,

461
00:21:38.330 --> 00:21:40.440
I think it's worth explicitly typing it,

462
00:21:40.440 --> 00:21:44.170
because who knows what other fields you're gonna be adding,

463
00:21:44.170 --> 00:21:46.520
and accidentally breaking this update form,

464
00:21:46.520 --> 00:21:48.740
whereas if you opt into the fields you want,

465
00:21:48.740 --> 00:21:50.200
it's much easier,

466
00:21:50.200 --> 00:21:51.860
so in our case, we need the name,

467
00:21:51.860 --> 00:21:53.860
which is inputs dot name,

468
00:21:53.860 --> 00:21:56.260
we need the description,

469
00:21:56.260 --> 00:21:57.950
and we need, what was it?

470
00:21:57.950 --> 00:21:58.793
The price,

471
00:22:01.330 --> 00:22:03.420
and that way we're only passing the data we want,

472
00:22:03.420 --> 00:22:06.260
and not just assuming everything goes along for the ride,

473
00:22:06.260 --> 00:22:07.450
so let's try it again,

474
00:22:07.450 --> 00:22:11.323
X, update product, another error,

475
00:22:14.180 --> 00:22:15.227
what was the error here?

476
00:22:15.227 --> 00:22:19.060
"Received status 400, error's undefined."

477
00:22:21.600 --> 00:22:22.550
Let's try it again.

478
00:22:23.460 --> 00:22:25.800
X, clear it out,

479
00:22:25.800 --> 00:22:27.427
update, here we go,

480
00:22:27.427 --> 00:22:30.317
"Field ID not defined by product input."

481
00:22:31.160 --> 00:22:32.583
Same error.

482
00:22:40.420 --> 00:22:41.800
Oh, I see,

483
00:22:41.800 --> 00:22:42.633
I know why,

484
00:22:43.560 --> 00:22:48.560
it's because our variables are coming in at one level here,

485
00:22:49.820 --> 00:22:51.020
I think I even made this mistake

486
00:22:51.020 --> 00:22:52.280
the first time I recorded it,

487
00:22:52.280 --> 00:22:53.344
and then there'll be splitting up

488
00:22:53.344 --> 00:22:56.020
into ID and data after that,

489
00:22:56.020 --> 00:22:59.840
so it's expecting us to pass the variables like this,

490
00:22:59.840 --> 00:23:01.960
not nested like that,

491
00:23:01.960 --> 00:23:06.843
so, we can go back to where we passed the variables,

492
00:23:08.670 --> 00:23:11.573
and just pass them at one level deep like this.

493
00:23:16.470 --> 00:23:18.453
Go, put an X on the end,

494
00:23:21.355 --> 00:23:24.337
ha, how many errors are we gonna get here?

495
00:23:24.337 --> 00:23:26.270
"Field ID is not defined by product--"

496
00:23:26.270 --> 00:23:28.150
It's the same error,

497
00:23:28.150 --> 00:23:28.983
so what I'm gonna do is I'm gonna do,

498
00:23:28.983 --> 00:23:32.570
is I'm gonna head back to my docs here for updateProduct,

499
00:23:33.960 --> 00:23:36.340
let's search for updateProduct,

500
00:23:38.530 --> 00:23:42.170
and yeah, it takes ID and a product update input,

501
00:23:42.170 --> 00:23:43.870
it's this that it's whining about,

502
00:23:43.870 --> 00:23:44.770
so let's take a look

503
00:23:44.770 --> 00:23:47.740
at what update product input looks like,

504
00:23:47.740 --> 00:23:50.040
name, description, photo, status, price,

505
00:23:50.040 --> 00:23:52.080
yeah, okay, so it's telling me

506
00:23:52.080 --> 00:23:56.090
that we're passing an ID along,

507
00:23:56.090 --> 00:23:57.736
ah, here it is,

508
00:23:57.736 --> 00:23:58.780
it's telling me

509
00:23:58.780 --> 00:24:00.840
that we're passing an ID along with it, right?

510
00:24:00.840 --> 00:24:02.280
And we shouldn't,

511
00:24:02.280 --> 00:24:03.530
we only should be passing those,

512
00:24:03.530 --> 00:24:06.090
so, whew, all right,

513
00:24:06.090 --> 00:24:08.370
so there was multiple bugs there,

514
00:24:08.370 --> 00:24:09.514
we fixed 'em all,

515
00:24:09.514 --> 00:24:11.740
and I bet it'll work now.

516
00:24:11.740 --> 00:24:13.880
Seventh time's a charm, right?

517
00:24:13.880 --> 00:24:14.880
Is that the saying?

518
00:24:14.880 --> 00:24:16.914
Update, boom, there we go,

519
00:24:16.914 --> 00:24:19.713
data came back, update product,

520
00:24:21.390 --> 00:24:22.450
and there's an X on it,

521
00:24:22.450 --> 00:24:24.223
I bet if we refresh the page now,

522
00:24:25.490 --> 00:24:28.800
there we go, it is updated,

523
00:24:28.800 --> 00:24:30.510
I like it, okay.

524
00:24:30.510 --> 00:24:31.730
Okay, that is working well,

525
00:24:31.730 --> 00:24:34.600
let's just triple check everything is working,

526
00:24:34.600 --> 00:24:35.870
there we go,

527
00:24:35.870 --> 00:24:37.760
refresh the page, it's all working,

528
00:24:37.760 --> 00:24:41.020
okay, so that is updating,

529
00:24:41.020 --> 00:24:42.030
there's one more bug,

530
00:24:42.030 --> 00:24:43.782
but I'm gonna wait till the next video,

531
00:24:43.782 --> 00:24:46.400
so that we can explain it a little bit better,

532
00:24:46.400 --> 00:24:49.950
and dig into how to actually fix that bug,

533
00:24:49.950 --> 00:24:51.200
I'll see you in that one.

