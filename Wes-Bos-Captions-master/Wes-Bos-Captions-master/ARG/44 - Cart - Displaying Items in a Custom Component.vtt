WEBVTT

1
00:00:01.460 --> 00:00:02.680
<v Tutor>Let's go to the front end again.</v>

2
00:00:02.680 --> 00:00:04.400
So we're in yellow here, I'm gonna actually

3
00:00:04.400 --> 00:00:06.700
start making our Cart.

4
00:00:06.700 --> 00:00:09.870
It might help to actually add a few items to your Cart

5
00:00:09.870 --> 00:00:11.920
so that we can loop over them.

6
00:00:11.920 --> 00:00:14.780
So maybe just create another Cart item

7
00:00:14.780 --> 00:00:17.870
five of the denim,

8
00:00:17.870 --> 00:00:20.860
that's to me, create the cart item

9
00:00:20.860 --> 00:00:22.940
and I'll just create one more,

10
00:00:22.940 --> 00:00:27.940
where we have one ultra boost that's associated to me.

11
00:00:28.290 --> 00:00:31.510
Whew, that's nice and fast, I really liked that UI.

12
00:00:31.510 --> 00:00:35.180
Oh men, look we forgot this, page one of underscore

13
00:00:35.180 --> 00:00:38.110
let's fix that real quick.

14
00:00:38.110 --> 00:00:40.300
Pagination, was it in there?

15
00:00:40.300 --> 00:00:41.133
Yeah.

16
00:00:45.120 --> 00:00:46.373
Was it pages?

17
00:00:47.210 --> 00:00:48.153
Page count,

18
00:00:50.530 --> 00:00:51.680
there we go okay, shows up.

19
00:00:51.680 --> 00:00:54.570
Okay, so now we wanna make a new component

20
00:00:54.570 --> 00:00:55.403
that's called Cart.

21
00:00:55.403 --> 00:00:57.860
So go to your components here, make a new file

22
00:00:57.860 --> 00:01:00.320
Capital C Cart.js

23
00:01:02.410 --> 00:01:07.410
And we'll export default function, capital C Cart

24
00:01:09.660 --> 00:01:14.653
and run return from that we want our Cart styles.

25
00:01:15.900 --> 00:01:17.480
And can we import those?

26
00:01:17.480 --> 00:01:20.760
No, let's go into our styles folder and take a look here.

27
00:01:20.760 --> 00:01:21.593
Here we go.

28
00:01:23.590 --> 00:01:26.570
And export default Cart styles.

29
00:01:26.570 --> 00:01:29.830
So we go to import those import Cart styles

30
00:01:29.830 --> 00:01:34.133
from styles Cart styles.

31
00:01:35.440 --> 00:01:37.563
And then inside of that, just say, hi.

32
00:01:39.090 --> 00:01:42.870
Then we'll go into our header.js

33
00:01:42.870 --> 00:01:45.090
and we're gonna put the Cart in there.

34
00:01:45.090 --> 00:01:48.570
So we'll go right below the search here

35
00:01:48.570 --> 00:01:52.453
or just simply put our Cart component and then import that.

36
00:01:54.190 --> 00:01:56.820
And there's one more thing that needs to happen

37
00:01:56.820 --> 00:01:58.020
for the Cart to show up.

38
00:01:58.020 --> 00:02:00.386
And that is we're gonna pass it

39
00:02:00.386 --> 00:02:02.480
a brand that is either open or closed.

40
00:02:02.480 --> 00:02:05.270
So we'll say open is equal to true.

41
00:02:05.270 --> 00:02:08.570
And I believe that will just auto save to just open.

42
00:02:08.570 --> 00:02:09.510
Yep.

43
00:02:09.510 --> 00:02:10.343
Here we go.

44
00:02:10.343 --> 00:02:11.730
So one kind of cool thing

45
00:02:11.730 --> 00:02:14.250
I'm gonna show you how to open and close the Cart is

46
00:02:14.250 --> 00:02:18.930
that the styles that we have right here.

47
00:02:18.930 --> 00:02:23.930
I'm passing a prop to the style component called open

48
00:02:24.400 --> 00:02:26.040
and what we're doing here is

49
00:02:26.040 --> 00:02:29.760
we can interpolate a little function right here that says

50
00:02:29.760 --> 00:02:32.590
if the props that open is true

51
00:02:32.590 --> 00:02:36.970
then we will transform translate X zero

52
00:02:36.970 --> 00:02:40.520
because the default is translate X 100%

53
00:02:40.520 --> 00:02:42.460
which we'll just put it off screen

54
00:02:42.460 --> 00:02:45.160
and then when it has a prop of open

55
00:02:45.160 --> 00:02:49.380
it we'll slide it on in, which is pretty, pretty nifty.

56
00:02:49.380 --> 00:02:51.050
So we'll keep it in the open state.

57
00:02:51.050 --> 00:02:52.370
And I think in the next video

58
00:02:52.370 --> 00:02:54.070
what we'll do is we'll create a button that we'll

59
00:02:54.070 --> 00:02:55.420
be able to open and close it.

60
00:02:55.420 --> 00:02:58.770
And we're actually gonna stick that in context.

61
00:02:58.770 --> 00:03:00.370
Next thing we need is a list

62
00:03:00.370 --> 00:03:02.300
of all the Cart items that the user has.

63
00:03:02.300 --> 00:03:06.630
So we can say const me is equal to use User

64
00:03:07.960 --> 00:03:12.060
because remember how the Cart is gonna be stored

65
00:03:12.060 --> 00:03:13.400
on our user.

66
00:03:13.400 --> 00:03:16.143
And then in there, let's just say me.email.

67
00:03:17.010 --> 00:03:18.360
Okay, good.

68
00:03:18.360 --> 00:03:22.130
Now we need to go into this use user function here

69
00:03:22.130 --> 00:03:24.370
and update that query

70
00:03:24.370 --> 00:03:28.743
because this will now have information about our Cart.

71
00:03:30.280 --> 00:03:32.260
So we'll go here, get rid of that to do

72
00:03:32.260 --> 00:03:36.570
or say Cart and give me the ID of each Cart item,

73
00:03:36.570 --> 00:03:40.690
give me the quantity of the Cart item

74
00:03:40.690 --> 00:03:43.180
and then for every product in the Cart item.

75
00:03:43.180 --> 00:03:46.550
Remember because the Cart item has a relation

76
00:03:46.550 --> 00:03:47.790
to an actual product.

77
00:03:47.790 --> 00:03:48.740
So say product

78
00:03:50.350 --> 00:03:52.350
for that we need the ID of the product,

79
00:03:52.350 --> 00:03:55.717
the price of the product, the photo of the product

80
00:03:55.717 --> 00:03:57.690
and that has an image

81
00:03:57.690 --> 00:04:01.373
which is nested on public url transformed.

82
00:04:02.590 --> 00:04:04.110
Then we need

83
00:04:04.110 --> 00:04:06.530
this is where those rainbow brackets

84
00:04:06.530 --> 00:04:09.020
I usually use are super handy.

85
00:04:09.020 --> 00:04:10.610
We need the name of the product

86
00:04:10.610 --> 00:04:12.150
and the description of the product.

87
00:04:12.150 --> 00:04:14.110
Maybe we should put these above the photo

88
00:04:14.110 --> 00:04:17.773
'cause lots and lots of curly brackets.

89
00:04:18.890 --> 00:04:19.723
Okay.

90
00:04:19.723 --> 00:04:21.630
That is good.

91
00:04:21.630 --> 00:04:25.970
Now we need to go back to our Cart.js.

92
00:04:25.970 --> 00:04:30.970
And we'll say if there is no me then return,

93
00:04:33.234 --> 00:04:36.720
you can return No, here you could return a paragraph

94
00:04:36.720 --> 00:04:39.980
cannot view Cart when they're not signed in.

95
00:04:39.980 --> 00:04:41.970
And then once we do decide that we are logged in

96
00:04:41.970 --> 00:04:43.420
then it will show up.

97
00:04:43.420 --> 00:04:48.420
Okay, so I believe now if we log the me variable

98
00:04:49.320 --> 00:04:53.773
we should see that we have a Cart value.

99
00:04:55.120 --> 00:04:55.953
There we go.

100
00:04:55.953 --> 00:04:58.330
And then inside of that Cart is the three items

101
00:04:58.330 --> 00:04:59.700
that are in our Cart.

102
00:04:59.700 --> 00:05:02.640
And then there is a link to a nested product

103
00:05:02.640 --> 00:05:06.110
and then you get all the values that you actually want.

104
00:05:06.110 --> 00:05:09.050
So we can start to loop over it and render out

105
00:05:09.050 --> 00:05:09.883
the rest of it.

106
00:05:09.883 --> 00:05:12.680
So let's go inside of our Cart styles here

107
00:05:12.680 --> 00:05:14.090
and we'll just go top to bottom.

108
00:05:14.090 --> 00:05:19.090
First, we need a header for our Cart and we are going to

109
00:05:21.340 --> 00:05:23.940
I have another component called Supreme

110
00:05:24.950 --> 00:05:28.430
and that is a styled component.

111
00:05:28.430 --> 00:05:33.040
And we're just going to put a me.name Cart.

112
00:05:36.910 --> 00:05:39.410
The Supreme style component needs to be imported.

113
00:05:39.410 --> 00:05:40.610
So I'll just duplicate this one

114
00:05:40.610 --> 00:05:44.143
at the top and replace with the Supreme.

115
00:05:47.610 --> 00:05:48.443
Here we go.

116
00:05:48.443 --> 00:05:49.523
Wes Bos's Cart.

117
00:05:51.720 --> 00:05:54.080
Now below that we need an unordered list

118
00:05:54.080 --> 00:05:57.087
'cause we're gonna loop over each of the items in the Cart.

119
00:05:57.087 --> 00:06:02.087
And we'll say me.Cart.map, we'll say Cart item.

120
00:06:03.610 --> 00:06:05.180
So for each Cart item

121
00:06:05.180 --> 00:06:09.020
we want to return a another component

122
00:06:09.020 --> 00:06:11.630
which is going to be a Cart item component

123
00:06:11.630 --> 00:06:13.960
because we don't necessarily wanna do all the nitty gritty

124
00:06:13.960 --> 00:06:16.270
of each Cart item right inside of here.

125
00:06:16.270 --> 00:06:18.000
We're gonna put it in its own component.

126
00:06:18.000 --> 00:06:20.350
So let's make a new component called Cart item,

127
00:06:21.500 --> 00:06:24.710
and that we'll need a key, 'cause anytime you're mapping

128
00:06:24.710 --> 00:06:26.470
over anything in react

129
00:06:26.470 --> 00:06:29.270
you always have to give it a unique key to that component

130
00:06:29.270 --> 00:06:31.580
all should be capital C.

131
00:06:31.580 --> 00:06:34.440
So lets just say Cartitem.id.

132
00:06:34.440 --> 00:06:39.230
And then we also need to pass the Cart item directly

133
00:06:39.230 --> 00:06:41.100
to the component.

134
00:06:41.100 --> 00:06:43.790
And that is simply just Cart item, right,

135
00:06:43.790 --> 00:06:45.403
'cause that's just right here.

136
00:06:48.570 --> 00:06:51.040
Now we'll go into our components folder

137
00:06:51.040 --> 00:06:53.300
and make that new Cart item component.

138
00:06:53.300 --> 00:06:54.713
Actually, we could also.

139
00:06:56.076 --> 00:06:57.556
Let's just do it in here.

140
00:06:57.556 --> 00:07:01.240
Sometimes I like to do components in the same file

141
00:07:01.240 --> 00:07:03.740
and then if it's needed in multiple places

142
00:07:03.740 --> 00:07:06.760
I will simply just move it out into its own file.

143
00:07:06.760 --> 00:07:08.130
But in this case, let's do it up here.

144
00:07:08.130 --> 00:07:11.870
So over here, make a function called Cart item

145
00:07:11.870 --> 00:07:15.610
that takes in a Cart item variable.

146
00:07:15.610 --> 00:07:18.000
And then from that we return

147
00:07:18.000 --> 00:07:21.110
let's just return a list item right now that has

148
00:07:21.110 --> 00:07:25.320
the Cart item.id inside of it.

149
00:07:25.320 --> 00:07:26.410
And there we go.

150
00:07:26.410 --> 00:07:29.950
So we have the very basics we gonna right here.

151
00:07:29.950 --> 00:07:31.020
We've got an unordered list.

152
00:07:31.020 --> 00:07:31.853
We're looping over it.

153
00:07:31.853 --> 00:07:33.230
And we for each card item

154
00:07:33.230 --> 00:07:37.370
we are rendering out the ID of the item that's in that Cart.

155
00:07:37.370 --> 00:07:40.370
We obviously need to go a little bit further

156
00:07:40.370 --> 00:07:45.370
and go up to this Cart item here and we need some styles.

157
00:07:45.540 --> 00:07:46.760
Let's write those ourselves.

158
00:07:46.760 --> 00:07:51.043
Const Cart, item styles is equal to style.li.

159
00:07:53.620 --> 00:07:56.193
Then we need to auto import styled good.

160
00:07:57.490 --> 00:08:02.490
I'll say padding one rem zero border dash bottom on px,

161
00:08:03.670 --> 00:08:08.670
solid var dash dash light gray, display.

162
00:08:09.900 --> 00:08:12.140
Actually look, let's get this role in so we can

163
00:08:12.140 --> 00:08:13.610
real-time see what we're working with.

164
00:08:13.610 --> 00:08:16.610
So replace these allies with our Cart item styles.

165
00:08:16.610 --> 00:08:21.600
There we go, we can go in here and display grid.

166
00:08:23.360 --> 00:08:28.360
Grid template columns was auto one and for auto.

167
00:08:30.370 --> 00:08:33.270
The reasoning behind this will make sense in just a second.

168
00:08:33.270 --> 00:08:37.550
The image that we have margin dash right is 10px

169
00:08:37.550 --> 00:08:38.670
or let's do one rem.

170
00:08:38.670 --> 00:08:39.923
So we stay consistent.

171
00:08:40.840 --> 00:08:42.570
And then our h three

172
00:08:42.570 --> 00:08:46.760
and our paragraph have a margin of zero.

173
00:08:46.760 --> 00:08:51.363
Okay, now we'll go back into our Cart item ally in here.

174
00:08:52.270 --> 00:08:57.197
And first we need an image where the source is Cart item.

175
00:09:03.010 --> 00:09:08.010
product.image.public url transformed.

176
00:09:10.617 --> 00:09:12.890
And then the alt should be the

177
00:09:12.890 --> 00:09:16.148
maybe let's make a quick little variable of product

178
00:09:16.148 --> 00:09:18.400
'cause Cart item.product has a long thing to type.

179
00:09:18.400 --> 00:09:19.600
So just say product.

180
00:09:19.600 --> 00:09:22.710
I'll go up here I'll say const product is equal

181
00:09:22.710 --> 00:09:24.323
to Cart item.product.

182
00:09:25.252 --> 00:09:26.733
So product.name.

183
00:09:29.100 --> 00:09:31.200
Can now access property public you'll transform

184
00:09:31.200 --> 00:09:36.200
product.image is undefined and is it how come?

185
00:09:37.810 --> 00:09:40.080
Let's console that log, the product.

186
00:09:40.080 --> 00:09:41.730
See what we're working with here.

187
00:09:42.660 --> 00:09:45.250
Oh, I think I know why it's because

188
00:09:45.250 --> 00:09:47.750
if we haven't fetched the user, yet there is no product.

189
00:09:47.750 --> 00:09:51.570
So say if there's no product we return

190
00:09:54.280 --> 00:09:55.113
no.

191
00:09:59.390 --> 00:10:02.210
No that wasn't, that's not the issue.

192
00:10:02.210 --> 00:10:03.730
Console.log product.

193
00:10:03.730 --> 00:10:06.090
Keep that in there because we'll need to do something

194
00:10:06.090 --> 00:10:08.570
about the fact that products can be deleted

195
00:10:08.570 --> 00:10:10.120
while they're in people's Cart.

196
00:10:14.450 --> 00:10:16.570
Oh, you might be saying like, why isn't it console logging?

197
00:10:16.570 --> 00:10:18.470
Because the initial renders on the server.

198
00:10:18.470 --> 00:10:20.143
So we've gotta take a look here.

199
00:10:21.000 --> 00:10:22.100
What that product is.

200
00:10:22.100 --> 00:10:26.773
So let's look at our server side here and here we go.

201
00:10:31.020 --> 00:10:32.443
This is our product.

202
00:10:37.750 --> 00:10:39.710
Let's see if each one of them, that one has a photo,

203
00:10:39.710 --> 00:10:42.840
that one has a photo and that one has a photo.

204
00:10:42.840 --> 00:10:47.220
Why did I it's not image it's photo.

205
00:10:47.220 --> 00:10:51.390
Oh, it's.photo, photo is the field

206
00:10:51.390 --> 00:10:52.970
and images the linked value.

207
00:10:52.970 --> 00:10:54.120
That's a little bit confusing.

208
00:10:54.120 --> 00:10:55.450
There we go.

209
00:10:55.450 --> 00:10:59.200
Now we've got the images being piped in here.

210
00:10:59.200 --> 00:11:02.310
Let's pop a little width in there with the 100 boom.

211
00:11:02.310 --> 00:11:04.430
Okay, I've got that.

212
00:11:04.430 --> 00:11:07.240
Then underneath that, just give yourself a div

213
00:11:07.240 --> 00:11:08.480
that doesn't need a class or anything.

214
00:11:08.480 --> 00:11:11.410
It's just 'cause we need one element to encompass

215
00:11:11.410 --> 00:11:12.460
a couple of things.

216
00:11:12.460 --> 00:11:17.430
Well, the h three tag that has the product.name

217
00:11:19.080 --> 00:11:24.080
and we need a paragraph tag that will tell how much it is.

218
00:11:24.890 --> 00:11:26.770
So we'll go in here.

219
00:11:26.770 --> 00:11:29.280
I'll say product price multiplied

220
00:11:29.280 --> 00:11:32.263
by the Cart item dot quantity.

221
00:11:36.480 --> 00:11:39.170
Okay, now we need to format that value.

222
00:11:39.170 --> 00:11:42.480
We have our format money function already written.

223
00:11:42.480 --> 00:11:46.693
So we can simply just wrap that format money.

224
00:11:50.640 --> 00:11:51.653
Go here.

225
00:11:54.500 --> 00:11:56.650
The auto import is not working right now.

226
00:11:56.650 --> 00:11:58.210
All right, let's do it manually.

227
00:11:58.210 --> 00:12:01.403
Import format money from.

228
00:12:03.640 --> 00:12:06.883
Go up a level into lib into format money.

229
00:12:07.933 --> 00:12:08.816
There we go.

230
00:12:08.816 --> 00:12:09.797
(laughs)

231
00:12:09.797 --> 00:12:11.766
$2,000 worth of cooler.

232
00:12:11.766 --> 00:12:12.830
(laughs)

233
00:12:12.830 --> 00:12:13.846
That's a lot.

234
00:12:13.846 --> 00:12:18.400
Okay, next thing we need inside of this paragraph

235
00:12:18.400 --> 00:12:20.350
tag is the first thing is format money.

236
00:12:21.440 --> 00:12:24.540
Then we need just a dash.

237
00:12:24.540 --> 00:12:28.760
And then I have an E and emphasis tag that will give us

238
00:12:28.760 --> 00:12:30.480
some details about how many are in the Cart.

239
00:12:30.480 --> 00:12:33.130
So Cart item.quantity.

240
00:12:33.130 --> 00:12:38.130
And then I use and times that's the multiplication sign

241
00:12:39.910 --> 00:12:42.740
which reads as multiplication side to screen reader.

242
00:12:42.740 --> 00:12:45.330
So that's, it both looks good as well

243
00:12:45.330 --> 00:12:48.350
as that's the proper thing to use instead of an X.

244
00:12:48.350 --> 00:12:52.980
And we also need the format money

245
00:12:54.000 --> 00:12:57.963
for the Cart product. price.

246
00:13:03.140 --> 00:13:04.180
See if that's working.

247
00:13:04.180 --> 00:13:07.650
Okay, so five times 10924 okay.

248
00:13:07.650 --> 00:13:11.420
And then the last thing is we just need the word each

249
00:13:11.420 --> 00:13:12.253
on the end.

250
00:13:13.320 --> 00:13:16.490
Okay, so we will need a button that will allow us to remove

251
00:13:16.490 --> 00:13:19.870
items from the Cart, but for now we don't have that yet.

252
00:13:19.870 --> 00:13:22.010
So that's totally fine.

253
00:13:22.010 --> 00:13:25.430
Last thing we wanna do is let's go back to our Cart right

254
00:13:25.430 --> 00:13:28.210
here and we'll have to show the total value, but I'm just

255
00:13:28.210 --> 00:13:31.203
curious right now I'm looping over the Cart right here.

256
00:13:32.650 --> 00:13:36.430
And I'm wondering what happens if there's not an item

257
00:13:36.430 --> 00:13:38.640
in the user's Cart, right?

258
00:13:38.640 --> 00:13:41.950
What if there's nothing in the user's Cart,

259
00:13:41.950 --> 00:13:46.950
let's go and let's sign in as somebody else.

260
00:13:47.800 --> 00:13:50.650
So what are the other users we have here?

261
00:13:50.650 --> 00:13:51.483
Test.

262
00:13:52.440 --> 00:13:54.440
Test@example.com.

263
00:13:54.440 --> 00:13:56.030
So sign in.

264
00:13:56.030 --> 00:13:58.363
I believe it was west west west or dogs.

265
00:13:59.720 --> 00:14:00.553
There we go.

266
00:14:00.553 --> 00:14:02.800
Okay, and there's no errors.

267
00:14:02.800 --> 00:14:03.633
No, okay.

268
00:14:03.633 --> 00:14:05.880
Nevermind, I thought that we had to like check

269
00:14:05.880 --> 00:14:08.440
for an empty Cart but it looks like the Cart will default

270
00:14:08.440 --> 00:14:12.470
to an empty array from graphQL API, which is really,

271
00:14:12.470 --> 00:14:13.980
really slick.

272
00:14:13.980 --> 00:14:16.440
So down here what we'll have to do is we give ourselves

273
00:14:16.440 --> 00:14:20.660
a footer and we need to have a paragraph

274
00:14:20.660 --> 00:14:21.900
and we'll calculate the totals.

275
00:14:21.900 --> 00:14:26.900
So format money, and we need a calc total price function

276
00:14:28.970 --> 00:14:31.030
and you just pass it to me.Cart.

277
00:14:31.030 --> 00:14:33.500
Now we'll have to write that function ourselves.

278
00:14:33.500 --> 00:14:35.660
Let's go into our lib folder,

279
00:14:35.660 --> 00:14:37.800
that's a good spot to put it.

280
00:14:37.800 --> 00:14:39.380
Make a new file.

281
00:14:39.380 --> 00:14:44.240
I'll call it calc total price.js.

282
00:14:44.240 --> 00:14:49.240
Oh, say export default function, calc total price,

283
00:14:52.460 --> 00:14:53.960
takes in the Cart.

284
00:14:53.960 --> 00:14:56.010
And then from that, we'll take the Cart

285
00:14:56.010 --> 00:14:58.400
and we'll reduce the Cart.

286
00:14:58.400 --> 00:15:01.500
We will start that value at zero because we wanna

287
00:15:01.500 --> 00:15:04.210
start the price how many cents are in the Cart.

288
00:15:04.210 --> 00:15:06.810
And then basically from there, we take a tally

289
00:15:06.810 --> 00:15:10.480
which is our accumulator of reduce and Cart item.

290
00:15:10.480 --> 00:15:13.850
And we're going to loop over each item in the Cart

291
00:15:13.850 --> 00:15:18.770
adding how many cents that item costs multiplied

292
00:15:18.770 --> 00:15:21.620
by how many items are in the Cart for that item,

293
00:15:21.620 --> 00:15:24.880
and then adding it to the sort of the running tally.

294
00:15:24.880 --> 00:15:29.880
So here what we'll do, let's say if there is no Cart

295
00:15:32.410 --> 00:15:36.960
item.product, simply just return tally.

296
00:15:36.960 --> 00:15:38.500
And the reason we do that is

297
00:15:38.500 --> 00:15:43.500
because products can be deleted, but they could

298
00:15:46.200 --> 00:15:49.920
still be in your Cart.

299
00:15:49.920 --> 00:15:52.610
That's kind of a weird thing to have to account for.

300
00:15:52.610 --> 00:15:55.990
But it's possible that a product gets deleted while it's

301
00:15:55.990 --> 00:15:58.550
in somebody's account or in someone's Cart.

302
00:15:58.550 --> 00:15:59.820
So we'll do that.

303
00:15:59.820 --> 00:16:04.820
Otherwise we're turn the tally plus Cart item.quantity

304
00:16:06.780 --> 00:16:10.433
multiplied by the Cart item.product.price.

305
00:16:14.930 --> 00:16:17.500
And let's jump back into our Cart here

306
00:16:17.500 --> 00:16:19.763
and import that function that we just wrote.

307
00:16:21.640 --> 00:16:24.620
That one auto imported and there we go.

308
00:16:24.620 --> 00:16:27.640
Nice, you see how it's like really handy just

309
00:16:27.640 --> 00:16:29.330
to stick all those little helper functions

310
00:16:29.330 --> 00:16:32.980
into a lib folder or a utils folder.

311
00:16:32.980 --> 00:16:36.320
That way you can also test them really nicely as well

312
00:16:36.320 --> 00:16:38.910
by just passing them an array of values and expecting

313
00:16:38.910 --> 00:16:41.220
that the price comes back to what your spec.

314
00:16:41.220 --> 00:16:44.360
So that is the basics of our React Cart.

315
00:16:44.360 --> 00:16:46.880
In the next video, we want to open

316
00:16:46.880 --> 00:16:49.553
and close this thing using React Context.

