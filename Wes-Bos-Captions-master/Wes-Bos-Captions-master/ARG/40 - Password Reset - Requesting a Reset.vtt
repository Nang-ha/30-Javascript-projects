WEBVTT

1
00:00:01.330 --> 00:00:02.190
<v Tutor>Alright,let's go through the</v>

2
00:00:02.190 --> 00:00:03.320
Reset Password Flow.

3
00:00:03.320 --> 00:00:05.300
So real quick on how this works

4
00:00:05.300 --> 00:00:08.490
is generally when you request a password reset,

5
00:00:08.490 --> 00:00:09.680
what happens is

6
00:00:09.680 --> 00:00:13.990
that your back end will generate a random token that looks

7
00:00:13.990 --> 00:00:15.380
like this.

8
00:00:15.380 --> 00:00:20.380
And then you are emailed a link with that token in the URL.

9
00:00:20.600 --> 00:00:23.830
And then when you try to reset the password,

10
00:00:23.830 --> 00:00:26.610
you pass it, your email address

11
00:00:26.610 --> 00:00:29.430
you also pass it your new password

12
00:00:29.430 --> 00:00:32.090
but then you pass it your token as well.

13
00:00:32.090 --> 00:00:32.923
And it will say, okay,

14
00:00:32.923 --> 00:00:35.980
when you trynna update your password.

15
00:00:35.980 --> 00:00:37.010
Here is a token.

16
00:00:37.010 --> 00:00:40.920
Lemme check if that token is on file for you as well

17
00:00:40.920 --> 00:00:43.190
as let me check that that token has been issued

18
00:00:43.190 --> 00:00:46.000
in the last half an hour, an hour or something like that.

19
00:00:46.000 --> 00:00:47.996
So that's how we're gonna go about it.

20
00:00:47.996 --> 00:00:50.170
When I previously recorded this course

21
00:00:50.170 --> 00:00:52.210
we generated that token ourselves and saved

22
00:00:52.210 --> 00:00:54.470
to the user and save the date and all that stuff.

23
00:00:54.470 --> 00:00:59.470
And luckily for us, Keystone has all the flow for that.

24
00:01:00.690 --> 00:01:02.070
The only thing that Keystone doesn't do

25
00:01:02.070 --> 00:01:03.310
is it doesn't send email.

26
00:01:03.310 --> 00:01:07.080
So it allows us to hook into that token generation

27
00:01:07.080 --> 00:01:10.150
And then we're gonna learn on how to send it out.

28
00:01:10.150 --> 00:01:11.600
So the next couple of videos

29
00:01:11.600 --> 00:01:14.580
we're gonna be looking at that on how to do that.

30
00:01:14.580 --> 00:01:18.820
So we're going to duplicate this sign up

31
00:01:19.940 --> 00:01:23.050
because it is very similar to sign up as well.

32
00:01:23.050 --> 00:01:25.890
So just save a copy of sign up component

33
00:01:25.890 --> 00:01:28.270
and we're gonna call it Request Reset, right?

34
00:01:28.270 --> 00:01:29.840
Because we're gonna have two components here.

35
00:01:29.840 --> 00:01:31.340
First, you request a reset

36
00:01:31.340 --> 00:01:33.601
and then the second you got the link, you go to your email

37
00:01:33.601 --> 00:01:36.140
you click it, you visit the website and then you come back

38
00:01:36.140 --> 00:01:38.190
and you actually run the Reset component.

39
00:01:39.120 --> 00:01:42.290
So let's just go

40
00:01:44.260 --> 00:01:46.070
top to bottom here.

41
00:01:46.070 --> 00:01:47.950
What is the email that we need?

42
00:01:47.950 --> 00:01:52.190
We really just need email.

43
00:01:52.190 --> 00:01:54.670
So we'll get rid of name and password here

44
00:01:54.670 --> 00:01:58.030
and then we can get rid of the name label

45
00:01:59.840 --> 00:02:02.273
and we get rid of the password label.

46
00:02:03.470 --> 00:02:05.973
We'll put the button that says Request Reset.

47
00:02:08.600 --> 00:02:13.273
And then we'll rename this component to Request Reset.

48
00:02:17.150 --> 00:02:20.680
Let's go to our sign in page and just put it in there.

49
00:02:20.680 --> 00:02:25.680
So sign up since called Request Reset to import that sucker.

50
00:02:27.500 --> 00:02:28.453
Here we go.

51
00:02:29.620 --> 00:02:33.223
I guess we should update the H2 tag that shows up here,

52
00:02:34.810 --> 00:02:38.683
request a Password Reset.

53
00:02:44.320 --> 00:02:47.250
And so that's the

54
00:02:47.250 --> 00:02:49.410
rendering part of it.

55
00:02:49.410 --> 00:02:51.740
The last little bit that we need is

56
00:02:53.220 --> 00:02:55.720
the success message, which we'll do that

57
00:02:55.720 --> 00:03:00.060
in just Second. Now let's go up to our Mutation here.

58
00:03:00.060 --> 00:03:01.740
We'll rename that too.

59
00:03:01.740 --> 00:03:03.960
So I selected all three places where that is.

60
00:03:03.960 --> 00:03:08.210
We'll rename that to Request Reset Mutation

61
00:03:11.650 --> 00:03:15.193
that only takes in an email address.

62
00:03:16.150 --> 00:03:19.970
Then the mutation that we run is called

63
00:03:21.040 --> 00:03:23.780
Send User Password Reset Link.

64
00:03:23.780 --> 00:03:27.900
And again, you could pull that up on our graph QL Explorer

65
00:03:27.900 --> 00:03:29.960
and this does not pass data.

66
00:03:29.960 --> 00:03:32.460
It just passes email.

67
00:03:32.460 --> 00:03:34.520
So in this case, it's just one value.

68
00:03:34.520 --> 00:03:35.680
They don't pass an object.

69
00:03:35.680 --> 00:03:36.703
It's just a value.

70
00:03:37.540 --> 00:03:40.560
Then back from there, I believe it's a code.

71
00:03:40.560 --> 00:03:43.720
Let's we can check it out by doing this,

72
00:03:43.720 --> 00:03:46.363
go to our graph QL Explorer.

73
00:03:47.590 --> 00:03:49.270
We'll take a look at our schema.

74
00:03:49.270 --> 00:03:51.830
No, not the schema, the docs

75
00:03:52.790 --> 00:03:54.710
search for that.

76
00:03:54.710 --> 00:03:56.710
So does not showing up yet.

77
00:03:56.710 --> 00:03:58.850
And in order for us to actually get that to show up

78
00:03:58.850 --> 00:04:02.660
we need to hop into the backend and set a few things up.

79
00:04:02.660 --> 00:04:04.530
So this is the first time we've done this in a bit

80
00:04:04.530 --> 00:04:06.460
but let's hop into the backend

81
00:04:06.460 --> 00:04:10.300
of our actual code and open up Keystone.ts

82
00:04:19.360 --> 00:04:22.140
And we gotta find where we create our auth.

83
00:04:22.140 --> 00:04:24.663
So create auth that's right here.

84
00:04:26.250 --> 00:04:29.530
And we've got our List Key Identity.

85
00:04:29.530 --> 00:04:34.390
Now below that we will have a Password Reset Link method

86
00:04:35.410 --> 00:04:38.340
actually, sorry, Password Reset Link is an object,

87
00:04:38.340 --> 00:04:43.340
On that we have a, an a sync send Token method

88
00:04:44.480 --> 00:04:47.770
and that will give us some arguments

89
00:04:47.770 --> 00:04:50.350
and let's just console.log the arguments.

90
00:04:50.350 --> 00:04:52.283
Now, just to see what we've got,

91
00:04:53.760 --> 00:04:55.430
it's given us grief

92
00:04:56.580 --> 00:05:01.060
a sync methods has no away inside of it and that's okay.

93
00:05:01.060 --> 00:05:02.730
We will await it in just a second.

94
00:05:02.730 --> 00:05:05.560
So now I believe we gotta kill our back end.

95
00:05:05.560 --> 00:05:06.620
Oh, that was our front end.

96
00:05:06.620 --> 00:05:09.020
Gotta kill the back end here and start it again.

97
00:05:11.060 --> 00:05:12.690
And now I believe if we go to

98
00:05:12.690 --> 00:05:17.370
our schema or our docs here, we can look for

99
00:05:18.350 --> 00:05:20.713
there we go see mutation.sendpasswordreset.

100
00:05:22.877 --> 00:05:25.560
And what it returns to is

101
00:05:26.500 --> 00:05:29.510
a code which could be

102
00:05:29.510 --> 00:05:32.850
identity not found or multiple identity matches.

103
00:05:32.850 --> 00:05:33.683
And then as well

104
00:05:33.683 --> 00:05:36.310
as the message saying it worked successfully.

105
00:05:36.310 --> 00:05:39.140
So the sort of the way that this is gonna work

106
00:05:39.140 --> 00:05:40.800
if I close this down here.

107
00:05:40.800 --> 00:05:42.633
So if we create our Mutation,

108
00:05:44.130 --> 00:05:46.090
what was the Mutation called?

109
00:05:46.090 --> 00:05:49.140
Send Password Reset link

110
00:05:49.140 --> 00:05:52.680
where the email is equal to westboss@gmail.com

111
00:05:52.680 --> 00:05:54.530
And then as a response from that

112
00:05:54.530 --> 00:05:57.080
we want the message and the code.

113
00:05:57.080 --> 00:06:00.200
Now, let me go to my terminal here and then

114
00:06:00.200 --> 00:06:03.160
clear out everything, and I'm gonna run this mutation.

115
00:06:03.160 --> 00:06:06.780
So we get null here, which that might have something to do.

116
00:06:06.780 --> 00:06:08.000
It might just return null

117
00:06:08.000 --> 00:06:09.700
we'll take a look,

118
00:06:09.700 --> 00:06:12.420
but we do get this right here.

119
00:06:12.420 --> 00:06:14.580
The item ID, which is the person,

120
00:06:14.580 --> 00:06:17.220
the identity, that's the Username.

121
00:06:17.220 --> 00:06:19.440
And this is the secret sauce right here.

122
00:06:19.440 --> 00:06:20.620
This is the token.

123
00:06:20.620 --> 00:06:24.020
This essentially is a password that can be used

124
00:06:24.020 --> 00:06:25.510
to reset your password.

125
00:06:25.510 --> 00:06:28.560
So be very careful what you do with this.

126
00:06:28.560 --> 00:06:32.370
You'll never wanna send this to the browser

127
00:06:32.370 --> 00:06:34.180
because if you send this to the browser

128
00:06:34.180 --> 00:06:36.360
and someone could reset any email address.

129
00:06:36.360 --> 00:06:39.650
So we need to put this in an email to the actual user

130
00:06:39.650 --> 00:06:42.960
right now, we're just cancel that logging that value out.

131
00:06:42.960 --> 00:06:45.220
And then we will look

132
00:06:45.220 --> 00:06:47.030
at how we can actually hook it up to that

133
00:06:47.030 --> 00:06:50.660
So simply by adding Password Reset Link Property

134
00:06:50.660 --> 00:06:54.530
to our create auth object, it allows, it gives us

135
00:06:54.530 --> 00:06:57.170
a new mutation called Send Password Reset Link.

136
00:06:57.170 --> 00:06:59.403
So we hopped back to the front end here.

137
00:07:00.330 --> 00:07:03.120
we can we know that we got a code

138
00:07:03.120 --> 00:07:05.610
and a message that's returned

139
00:07:06.610 --> 00:07:10.113
Let's try it with an email that doesn't exist.

140
00:07:13.460 --> 00:07:15.030
The email, yeah, here we go.

141
00:07:15.030 --> 00:07:16.220
They give you a message and a code.

142
00:07:16.220 --> 00:07:17.660
That's only when there's an error,

143
00:07:17.660 --> 00:07:20.760
it will give you that information.

144
00:07:20.760 --> 00:07:25.030
Next, we need to show them that it was successful.

145
00:07:25.030 --> 00:07:29.110
So the fact that this returns null when it's successful

146
00:07:30.170 --> 00:07:32.210
it's a bit weird, but that's how it works.

147
00:07:32.210 --> 00:07:34.290
So we need to check for that in here.

148
00:07:34.290 --> 00:07:35.700
So we'll say

149
00:07:35.700 --> 00:07:37.550
if the data.sendUserpasswordResetLink

150
00:07:42.620 --> 00:07:45.570
is, Oh, I spelled it wrong

151
00:07:48.580 --> 00:07:51.870
Is equal to null

152
00:07:51.870 --> 00:07:55.100
then what we will do

153
00:07:55.100 --> 00:07:58.540
is we will say Paragraph Success

154
00:07:59.530 --> 00:08:02.040
Check your email for a link

155
00:08:04.720 --> 00:08:07.690
Okay, So now we go to our Reset Password

156
00:08:09.330 --> 00:08:12.110
And if I put in westbosspage@gmail.com

157
00:08:14.680 --> 00:08:18.000
I'm gonna have my terminal open here, clear it out

158
00:08:18.000 --> 00:08:22.250
run it, success, check your email for a link and boom

159
00:08:22.250 --> 00:08:24.040
we get this token show up.

160
00:08:24.040 --> 00:08:27.010
So that as the first pizza of the pie

161
00:08:27.010 --> 00:08:31.870
which is actually triggering that method to go off

162
00:08:31.870 --> 00:08:36.090
the next thing we need to do is to make a new form

163
00:08:36.090 --> 00:08:41.090
that will take that token in from the URL and then reset it.

164
00:08:41.580 --> 00:08:43.800
And then the third thing we'll need to do is actually go

165
00:08:43.800 --> 00:08:45.860
on the backend and send an actual email

166
00:08:45.860 --> 00:08:48.133
to the user instead of just logging it.

