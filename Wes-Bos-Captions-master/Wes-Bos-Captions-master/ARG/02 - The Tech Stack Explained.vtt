WEBVTT

1
00:00:00.013 --> 00:00:01.578
(logo whooshing)

2
00:00:01.578 --> 00:00:02.660
<v Instructor>All right, in this video, we're gonna talk</v>

3
00:00:02.660 --> 00:00:04.850
about the tech that we're using.

4
00:00:04.850 --> 00:00:08.040
It's sort of helpful to understand the different parts.

5
00:00:08.040 --> 00:00:10.140
The thing about JavaScript and JavaScript frameworks,

6
00:00:10.140 --> 00:00:14.640
in general, is that even if you use a full framework

7
00:00:14.640 --> 00:00:16.010
like we are, like Next.js,

8
00:00:16.010 --> 00:00:19.660
you still have to bring your own X, Y and Z.

9
00:00:19.660 --> 00:00:22.150
So, I'm gonna go through the major building blocks

10
00:00:22.150 --> 00:00:23.000
that we're using here

11
00:00:23.000 --> 00:00:26.520
and explain what they are for and why we are using them.

12
00:00:26.520 --> 00:00:28.220
So, this is the app that we're building.

13
00:00:28.220 --> 00:00:32.200
It's called Sick Fits, and it will show you things.

14
00:00:32.200 --> 00:00:33.880
You can go ahead and add stuff to your cart.

15
00:00:33.880 --> 00:00:34.920
You can open your cart.

16
00:00:34.920 --> 00:00:37.880
You can check out with your credit card.

17
00:00:37.880 --> 00:00:41.420
You can see any orders that you possibly have had before.

18
00:00:41.420 --> 00:00:43.000
You can modify your account.

19
00:00:43.000 --> 00:00:45.740
You can go ahead and sell your own items.

20
00:00:45.740 --> 00:00:48.530
So, this is just an application that allows us to hit

21
00:00:48.530 --> 00:00:51.850
upon all the things that I wanna teach you in this thing,

22
00:00:51.850 --> 00:00:53.410
which at the end of the day

23
00:00:53.410 --> 00:00:57.330
we're touching upon a lot of advanced React topics,

24
00:00:57.330 --> 00:01:02.120
as well as learning graph QL along the way.

25
00:01:02.120 --> 00:01:03.880
Then the backend of that looks like this,

26
00:01:03.880 --> 00:01:06.410
where it will probably look a little bit different

27
00:01:06.410 --> 00:01:07.243
by the time you are on this.

28
00:01:07.243 --> 00:01:12.243
So, it's just a new version of this being pushed out

29
00:01:13.010 --> 00:01:16.220
that I am going to record the backend part with.

30
00:01:16.220 --> 00:01:17.580
So, it might look a little bit different.

31
00:01:17.580 --> 00:01:18.413
Don't sweat it.

32
00:01:18.413 --> 00:01:21.070
If it does, it will all be the same in the course.

33
00:01:21.070 --> 00:01:23.260
You can go things, you can see your items.

34
00:01:23.260 --> 00:01:24.630
You go ahead and create one.

35
00:01:24.630 --> 00:01:25.900
You can upload images.

36
00:01:25.900 --> 00:01:28.410
Select who the item belongs to.

37
00:01:28.410 --> 00:01:29.510
All that good stuff.

38
00:01:29.510 --> 00:01:32.900
So, let's go through all the different parts that we have.

39
00:01:32.900 --> 00:01:34.360
I've got them right here.

40
00:01:34.360 --> 00:01:35.770
So, the front end,

41
00:01:35.770 --> 00:01:38.750
which is the actual application that we have here.

42
00:01:38.750 --> 00:01:42.086
That's built in React, Next, Apollo, Styled Components.

43
00:01:42.086 --> 00:01:45.250
And I'm gonna say friends 'cause there's couple

44
00:01:45.250 --> 00:01:49.460
other packages here and there that we're gonna be using.

45
00:01:49.460 --> 00:01:50.950
So, first thing is React.

46
00:01:50.950 --> 00:01:53.660
React is the library for building user interfaces.

47
00:01:53.660 --> 00:01:56.560
So, React is really good at one thing.

48
00:01:56.560 --> 00:02:01.560
It's good at taking data, putting it into templates

49
00:02:01.750 --> 00:02:05.100
and then rendering it out to the Dom, to your web browser.

50
00:02:05.100 --> 00:02:08.090
And when that data that's in your templates updates,

51
00:02:08.090 --> 00:02:11.270
React is really good at knowing how to efficiently

52
00:02:11.270 --> 00:02:13.820
and quickly update that on the page.

53
00:02:13.820 --> 00:02:15.580
And that's at the core, React,

54
00:02:15.580 --> 00:02:17.150
it does a little bit more than that,

55
00:02:17.150 --> 00:02:20.130
in terms of, we can do some basic state management

56
00:02:20.130 --> 00:02:24.350
with it and whatnot, but at its core, React does that.

57
00:02:24.350 --> 00:02:26.440
The next piece that we use is Next.js.

58
00:02:26.440 --> 00:02:29.470
So, Next.js is a framework for React.

59
00:02:29.470 --> 00:02:31.690
It takes the good stuff of React

60
00:02:31.690 --> 00:02:36.330
and then it adds things like routing, pages,

61
00:02:36.330 --> 00:02:40.230
static rendering or on-demand server rendering, images.

62
00:02:40.230 --> 00:02:43.170
So, it takes all of the stuff that you need

63
00:02:43.170 --> 00:02:44.550
out of a framework in terms of like,

64
00:02:44.550 --> 00:02:46.510
how do I make pages and how do I build this thing?

65
00:02:46.510 --> 00:02:47.470
And how do I deploy it?

66
00:02:47.470 --> 00:02:48.799
It takes all of that

67
00:02:48.799 --> 00:02:52.240
and puts it into a framework for you.

68
00:02:52.240 --> 00:02:54.510
So, I am a big fan of Next.js

69
00:02:54.510 --> 00:02:57.430
and we're gonna be using that in this course.

70
00:02:57.430 --> 00:02:59.680
The next thing is Apollo Client.

71
00:02:59.680 --> 00:03:03.510
So, Apollo is a company that does a lot of stuff

72
00:03:03.510 --> 00:03:05.750
around graph QL.

73
00:03:05.750 --> 00:03:10.050
And in order to query all of the items that we want,

74
00:03:10.050 --> 00:03:13.940
in order to create charges and charges of credit card

75
00:03:13.940 --> 00:03:16.820
and all that, we need a way to interface

76
00:03:16.820 --> 00:03:20.520
with our graph QL API, and to load in the data,

77
00:03:20.520 --> 00:03:23.440
provide loading states, provide error states.

78
00:03:23.440 --> 00:03:25.350
We need something that is going to be able

79
00:03:25.350 --> 00:03:26.890
to cache the data.

80
00:03:26.890 --> 00:03:29.870
So, we're not unnecessarily fetching that from the network.

81
00:03:29.870 --> 00:03:32.700
And that is what Apollo client will do for us.

82
00:03:32.700 --> 00:03:35.020
So, it will be integrating that pretty tightly

83
00:03:35.020 --> 00:03:36.280
into our application.

84
00:03:36.280 --> 00:03:38.030
Anytime we wanna either fetch data

85
00:03:38.030 --> 00:03:40.793
or push data to our actual server.

86
00:03:41.750 --> 00:03:43.250
Next one is Styled Components.

87
00:03:43.250 --> 00:03:47.140
Styled Components is a great way to do what is referred

88
00:03:47.140 --> 00:03:50.010
to as a scope CSS in React.

89
00:03:50.010 --> 00:03:51.510
So, we're gonna be writing a whole bunch

90
00:03:51.510 --> 00:03:53.240
of reusable styles.

91
00:03:53.240 --> 00:03:56.500
Things like, let's take a look at our actual application.

92
00:03:56.500 --> 00:04:00.880
Everything from like this tiny little title that says goose

93
00:04:00.880 --> 00:04:05.360
or ultra boost, the pagination, the navigation.

94
00:04:05.360 --> 00:04:07.130
All of these things have styles

95
00:04:07.130 --> 00:04:08.170
that are associated with them.

96
00:04:08.170 --> 00:04:11.700
And being able to create reusable styles that are scoped,

97
00:04:11.700 --> 00:04:15.530
meaning that if we make changes to the CSS on this

98
00:04:15.530 --> 00:04:17.240
and we accidentally have a class name,

99
00:04:17.240 --> 00:04:19.250
that's the same somewhere else on our page,

100
00:04:19.250 --> 00:04:20.810
that's not going to be affected.

101
00:04:20.810 --> 00:04:24.930
So, there's lots and lots of options for using CSS

102
00:04:24.930 --> 00:04:26.163
in React.

103
00:04:27.000 --> 00:04:29.250
And Styled Components is one of my favorites.

104
00:04:29.250 --> 00:04:30.770
And I think you'll probably like it.

105
00:04:30.770 --> 00:04:33.280
And you know, the main benefit here

106
00:04:33.280 --> 00:04:35.810
or the main thing that I wanna get across is that

107
00:04:36.659 --> 00:04:40.460
it's going to teach you the ideas of writing CSS

108
00:04:40.460 --> 00:04:43.170
in React applications, and more importantly,

109
00:04:43.170 --> 00:04:46.040
how to write modular scope CSS components

110
00:04:46.040 --> 00:04:47.460
that can be reused.

111
00:04:47.460 --> 00:04:51.250
And quite honestly, the ideas that we'll learn here

112
00:04:51.250 --> 00:04:56.120
are applicable to all of the other CSS and JS frameworks.

113
00:04:56.120 --> 00:04:57.710
So, don't stress.

114
00:04:57.710 --> 00:04:59.870
If you rather use another one,

115
00:04:59.870 --> 00:05:02.860
you'll be able to make the switch pretty easily.

116
00:05:02.860 --> 00:05:04.810
Let's talk about the backend now.

117
00:05:04.810 --> 00:05:06.930
The backend is Keystone.js.

118
00:05:06.930 --> 00:05:07.900
So, what is that?

119
00:05:07.900 --> 00:05:11.650
Well, Keystone.js is a framework that gives us

120
00:05:12.517 --> 00:05:14.250
what's called a headless CMS.

121
00:05:14.250 --> 00:05:16.110
And what a headless CMS is

122
00:05:16.110 --> 00:05:19.810
it allows you to log in to your CMS.

123
00:05:19.810 --> 00:05:22.110
We can create all of our different data types

124
00:05:22.110 --> 00:05:24.500
like cart items and actual items

125
00:05:24.500 --> 00:05:26.700
and allows us to upload photos.

126
00:05:26.700 --> 00:05:28.490
It gives us this really nice interface

127
00:05:28.490 --> 00:05:29.900
that allows us to manage our data.

128
00:05:29.900 --> 00:05:31.730
You've probably used something like this.

129
00:05:31.730 --> 00:05:35.150
And then out the other end, instead of us having

130
00:05:35.150 --> 00:05:37.450
like a Keystone theme or something like that,

131
00:05:37.450 --> 00:05:40.680
which you might be used to in WordPress land,

132
00:05:40.680 --> 00:05:44.590
is it will actually give us a graph QL API.

133
00:05:44.590 --> 00:05:47.243
Let me scroll up here.

134
00:05:48.300 --> 00:05:51.350
It gives us a graph QL API that will allow us

135
00:05:51.350 --> 00:05:53.370
to write these things called queries,

136
00:05:53.370 --> 00:05:56.520
where we can query all the items.

137
00:05:56.520 --> 00:05:58.760
And for each item I wanna get the name

138
00:05:58.760 --> 00:06:00.020
and the price of that.

139
00:06:00.020 --> 00:06:01.570
And then I'll go ahead and run that.

140
00:06:01.570 --> 00:06:03.710
And it will return to us all of our data.

141
00:06:03.710 --> 00:06:05.850
This is the part that we're gonna learn

142
00:06:05.850 --> 00:06:07.480
that is referred to as graph QL.

143
00:06:07.480 --> 00:06:12.480
We're gonna use Apollo to make these queries

144
00:06:12.520 --> 00:06:16.680
and to pull the data into our front-end application.

145
00:06:16.680 --> 00:06:21.433
So, again, Keystone is going to provide us a graph QL API

146
00:06:21.433 --> 00:06:25.390
based on all of the crud, create, read, update

147
00:06:25.390 --> 00:06:29.830
delete operations in our CMS here.

148
00:06:29.830 --> 00:06:32.500
And then Apollo will make the queries from

149
00:06:32.500 --> 00:06:36.420
to Keystone and put the data into our Next.js app.

150
00:06:36.420 --> 00:06:40.280
So, Apollo is sort of the person in the middle

151
00:06:40.280 --> 00:06:41.750
that goes and fetches the data

152
00:06:41.750 --> 00:06:44.670
and then injects it into our React application.

153
00:06:44.670 --> 00:06:48.513
Keystone.js is written in Node, Node.js,

154
00:06:49.490 --> 00:06:53.250
and all of our resolvers will be written in JavaScript.

155
00:06:53.250 --> 00:06:55.680
Under the hood, it uses either Mongo DB,

156
00:06:55.680 --> 00:06:58.760
which I will be using in this tutorial.

157
00:06:58.760 --> 00:07:03.760
But you can also hook it up to PostgREST database.

158
00:07:03.760 --> 00:07:06.440
If you take a look here, they've got how to hook it up

159
00:07:06.440 --> 00:07:10.780
to PostgREST as well as you can hook it up to Prisma,

160
00:07:10.780 --> 00:07:14.190
if you've ever used Prisma before, which is pretty cool.

161
00:07:14.190 --> 00:07:16.370
So, it doesn't matter what database you use

162
00:07:16.370 --> 00:07:19.630
because the code that we write for Keystone

163
00:07:19.630 --> 00:07:21.240
will just be figured out under the hood.

164
00:07:21.240 --> 00:07:23.500
So, you could hook it up to any database.

165
00:07:23.500 --> 00:07:26.370
If you're and a lot of people really like PostgREST

166
00:07:26.370 --> 00:07:27.220
versus Mongo.

167
00:07:27.220 --> 00:07:30.130
So, they'll use that or some people are diehard Mongo fans,

168
00:07:30.130 --> 00:07:32.480
so they'll wanna use that.

169
00:07:32.480 --> 00:07:35.250
So, that is the tech behind this.

170
00:07:35.250 --> 00:07:38.510
Let's jump in and actually start getting set up

171
00:07:38.510 --> 00:07:40.410
with our front-end and building our Next.js

172
00:07:40.410 --> 00:07:41.683
and React application.

